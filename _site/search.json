[
  {
    "objectID": "data/qtm350 - data loading + cleaning - lucas lobo.html",
    "href": "data/qtm350 - data loading + cleaning - lucas lobo.html",
    "title": "Data Loading, Merging, and Cleaning",
    "section": "",
    "text": "Location: ‘data’ folder.\nLucas Lobo\n\nDescription\n\nNote: this can be copy-pasted into the ‘Data Description’ part in the Quarto report.\nWe chose to focus on the ‘population dynamics’ research question within the WDI Dataset. Specifically, we wanted to explored how various health-related, economic, and geographic factors contributed towards and interacted with life expectancy at birth, mortality rate, and adolescent fertility rate. Some of these factors (or ‘services,’ as named by the WDI) include immunization rates for DPT, HepB3, measles, prevalence of HIV, TB case detection rates, proportion of expenditure spent on health-related measures, urban and rural populations, unemployment rates, surface area, and rule of law estimates. To narrow our focus, we only included data from Central and South American countries: Argentina, Belize, Costa Rica, El Salvador, Guatemala, Honduras, Mexico, Nicaragua, Panama, Bolivia, Brazil, Chile, Colombia, Ecuador, Guyana, Paraguay, Peru, Suriname, Uruguay, Venezuela, Cuba, Dominican Republic, Haiti, Puerto Rico (territory), St. Martin. Finally, we included data from the past 50 years (1975-2024).\n\nLoading + Creating the Database.\n\n\n# Relevant packages:\nimport sqlite3\nimport pandas as pd\n\n# Loading the WDI data as a csv (using pandas):\ndf = pd.read_csv(r\"C:\\Users\\lcsrl\\Downloads\\QTM350 Final Project Data.csv\", encoding='latin1')\n\n# Created a database by running the following two commands in my terminal:\n## cd \"C:\\Users\\lcsrl\\Downloads\"\n## touch qtm350_project.db\n\n# Relevant packages:\nimport sqlite3\nimport pandas as pd\n\n# Loading the WDI data as a csv (using pandas):\ndf = pd.read_csv(r\"C:\\Users\\lcsrl\\Downloads\\QTM350 Final Project Data.csv\", encoding='latin1')\n\n# Created a database by running the following two commands in my terminal:\n## cd \"C:\\Users\\lcsrl\\Downloads\"\n## touch qtm350_project.db\n\n# Set up connection:\nconn = sqlite3.connect(r\"C:\\Users\\lcsrl\\Downloads\\qtm350_project.db\")\ncursor = conn.cursor()\n\n# Write 'df' to SQL:\ncursor.execute(\"DROP TABLE IF EXISTS wdi;\")\ndf.to_sql('wdi', conn, if_exists='replace', index=False)\n\n542\n\n\nOpening ‘qtm350_project.db’: matches exactly.\n\n\n\nimage.png\n\n\n\nData Cleaning + Transformation. Off the bat, there are lots of oddly-named variables and warped data. We’ll create a new cleaned table. We’ll drop/modify N/A values (denoted as ..) according to the following procedures.\n\n\n# new, cleaned dataframe\n# 1: create a new 'year' list (to replace the current format)\nyear_columns = [\n    f'\"{year} [YR{year}]\" AS \"{year}\"' for year in range(1975, 2025)\n]\n\n# 2: new table only with relevant columns: country_name, indicator, and years \ncursor.execute(\"DROP TABLE IF EXISTS wdi_renamed;\")\nq_keep = f\"\"\"\nCREATE TABLE wdi_renamed AS\nSELECT \n    \"Country Name\" AS country_name,\n    \"Series Name\" AS indicator,\n    {', '.join(year_columns)}\nFROM wdi\n\"\"\"\nconn.execute(q_keep)\n\n&lt;sqlite3.Cursor at 0x1e79bba3640&gt;\n\n\n\npd.read_sql(\"SELECT * FROM wdi_renamed\", conn).head()\n\n\n\n\n\n\n\n\ncountry_name\nindicator\n1975\n1976\n1977\n1978\n1979\n1980\n1981\n1982\n...\n2015\n2016\n2017\n2018\n2019\n2020\n2021\n2022\n2023\n2024\n\n\n\n\n0\nArgentina\nLife expectancy at birth, total (years)\n66.965\n67.03\n67.595\n67.999\n68.434\n68.576\n68.858\n68.973\n...\n76.6\n76.105\n76.543\n76.77\n76.847\n75.878\n73.948\n75.806\n77.395\n..\n\n\n1\nArgentina\nMortality rate, under-5 (per 1,000 live births)\n63.3\n59.8\n55.6\n51.2\n46.8\n42.8\n39.4\n36.5\n...\n11.7\n11.4\n11\n10.7\n10.5\n10.3\n10\n9.8\n9.6\n..\n\n\n2\nArgentina\nAdolescent fertility rate (births per 1,000 wo...\n73.076\n74.913\n76.634\n77.695\n78.328\n77.928\n76.742\n74.387\n...\n63.879\n58.79\n55.022\n49.926\n41.751\n31.492\n28.54\n25.767\n26.414\n..\n\n\n3\nArgentina\nPrevalence of HIV, total (% of population ages...\n..\n..\n..\n..\n..\n..\n..\n..\n...\n0.4\n0.4\n0.4\n0.4\n0.4\n0.4\n0.4\n0.4\n..\n..\n\n\n4\nArgentina\nImmunization, DPT (% of children ages 12-23 mo...\n..\n..\n..\n..\n..\n44\n49\n58\n...\n94\n92\n86\n86\n83\n74\n81\n84\n66\n..\n\n\n\n\n5 rows × 52 columns\n\n\n\n\nWe will create a new column in wdi_renamed called ‘region’ that sorts the countries into three regions as follows:\n\nCentral America (9 countries): Belize, Costa Rica, El Salvador, Guatemala, Honduras, Nicaragua, Panama, Mexico, Bolivia,\nSouth America (10 countries): Argentina, Brazil, Chile, Colombia, Guyana, Paraguay, Peru, Suriname, Uruguay, Venezuela, RB.\nCaribbean (5 countries): Dominican Republic, Haiti, Jamaica, St. Martin (French part), Puerto Rico.\n\nconn.execute(\"DROP TABLE IF EXISTS wdi_region;\")\n\n# writes an implicit 'if else' function in sql to create a new column 'region' based on the country name by using CASE WHEN/ELSE statements.\nq_region = \"\"\"\nCREATE TABLE wdi_region AS\nSELECT \n    country_name,\n    CASE\n        WHEN country_name IN (\n            'Belize', 'Costa Rica', 'El Salvador', 'Guatemala', 'Honduras', 'Nicaragua', 'Panama', 'Mexico', 'Bolivia'\n        ) THEN 'Central America'\n        WHEN country_name IN (\n            'Argentina', 'Brazil', 'Chile', 'Colombia', 'Ecuador', 'Guyana', 'Paraguay', 'Peru', 'Suriname', 'Uruguay', 'Venezuela, RB'\n        ) THEN 'South America'\n        WHEN country_name IN (\n            'Cuba', 'Dominican Republic', 'Haiti', 'Jamaica', 'St. Martin (French part)', 'Puerto Rico'\n        ) THEN 'Caribbean'\n        ELSE 'Other'\n    END AS region,\n    indicator,\n    \"1975\", \"1976\", \"1977\", \"1978\", \"1979\", \"1980\", \"1981\", \"1982\", \"1983\", \"1984\", \"1985\", \"1986\", \"1987\", \"1988\", \"1989\",\n    \"1990\", \"1991\", \"1992\", \"1993\", \"1994\", \"1995\", \"1996\", \"1997\", \"1998\", \"1999\", \"2000\", \"2001\", \"2002\", \"2003\", \"2004\", \n    \"2005\", \"2006\", \"2007\", \"2008\", \"2009\", \"2010\", \"2011\", \"2012\", \"2013\", \"2014\", \"2015\", \"2016\", \"2017\", \"2018\", \"2019\",\n    \"2020\", \"2021\", \"2022\", \"2023\", \"2024\"\nFROM wdi_renamed\n\"\"\"\n\nconn.execute(q_region)\n\n&lt;sqlite3.Cursor at 0x1e79bba10c0&gt;\n\n\n\nWe’ll create a pivot table (long) in order to display each variable in each year by country.\n\n\n# SQL code that mimics 'melt' in python: iterates over each year and stores a list of queries\nyear_range = range(1975, 2025)\nunion_queries = []\n\n# creates a list of SQL commands\n# column order: year, country_name\nconn.execute(\"DROP TABLE IF EXISTS wdi_long;\")\nfor year in year_range:\n    union_queries.append(f\"\"\"\n    SELECT \n        '{year}' AS year,\n        country_name,\n        region,\n        indicator,\n        \"{year}\" AS value\n    FROM wdi_region\n    WHERE \"{year}\" IS NOT NULL\n    \"\"\")\n\n# joins and executes each individual year using UNION ALL (basically stacks on top of each other)\nq_long = f\"\"\"\nCREATE TABLE wdi_long AS\n{'\\nUNION ALL\\n'.join(union_queries)}\n\"\"\"\n\nconn.execute(q_long)\n\n&lt;sqlite3.Cursor at 0x1e79bb919c0&gt;\n\n\nLots of information for various years is unavailable, perhaps because the country does not track certain info, they only started after a certain year, etc. We’ll create a modified version of this pivot table to only include rows where the data is present\n\nconn.execute(\"DROP TABLE IF EXISTS wdi_long_clean;\")\nq_filter_non_null = \"\"\"\nCREATE TABLE wdi_long_clean AS\nSELECT *\nFROM wdi_long\nWHERE value IS NOT NULL AND value != '..'\n\"\"\"\nconn.execute(q_filter_non_null)\n\n&lt;sqlite3.Cursor at 0x1e7993f70c0&gt;\n\n\n\n# Here's a sample of the cleaned data:\npd.read_sql(\"SELECT * FROM wdi_long_clean\", conn).head(25)\n\n\n\n\n\n\n\n\nyear\ncountry_name\nregion\nindicator\nvalue\n\n\n\n\n0\n1975\nArgentina\nSouth America\nLife expectancy at birth, total (years)\n66.965\n\n\n1\n1975\nArgentina\nSouth America\nMortality rate, under-5 (per 1,000 live births)\n63.3\n\n\n2\n1975\nArgentina\nSouth America\nAdolescent fertility rate (births per 1,000 wo...\n73.076\n\n\n3\n1975\nArgentina\nSouth America\nUrban population\n20950006\n\n\n4\n1975\nArgentina\nSouth America\nUnemployment, total (% of total labor force) (...\n2.3\n\n\n5\n1975\nArgentina\nSouth America\nTrade (% of GDP)\n11.80272429\n\n\n6\n1975\nArgentina\nSouth America\nSurface area (sq. km)\n2780400\n\n\n7\n1975\nArgentina\nSouth America\nSchool enrollment, primary (% net)\n96.32775\n\n\n8\n1975\nArgentina\nSouth America\nRural population\n4924101\n\n\n9\n1975\nBelize\nCentral America\nLife expectancy at birth, total (years)\n65.377\n\n\n10\n1975\nBelize\nCentral America\nMortality rate, under-5 (per 1,000 live births)\n80\n\n\n11\n1975\nBelize\nCentral America\nAdolescent fertility rate (births per 1,000 wo...\n142.49\n\n\n12\n1975\nBelize\nCentral America\nUrban population\n65416\n\n\n13\n1975\nBelize\nCentral America\nSurface area (sq. km)\n22970\n\n\n14\n1975\nBelize\nCentral America\nRural population\n64971\n\n\n15\n1975\nCosta Rica\nCentral America\nLife expectancy at birth, total (years)\n70.253\n\n\n16\n1975\nCosta Rica\nCentral America\nMortality rate, under-5 (per 1,000 live births)\n45.4\n\n\n17\n1975\nCosta Rica\nCentral America\nAdolescent fertility rate (births per 1,000 wo...\n91.632\n\n\n18\n1975\nCosta Rica\nCentral America\nUrban population\n865318\n\n\n19\n1975\nCosta Rica\nCentral America\nTrade (% of GDP)\n68.60978582\n\n\n20\n1975\nCosta Rica\nCentral America\nSurface area (sq. km)\n51100\n\n\n21\n1975\nCosta Rica\nCentral America\nSchool enrollment, primary (% net)\n90.45446\n\n\n22\n1975\nCosta Rica\nCentral America\nRural population\n1227401\n\n\n23\n1975\nEl Salvador\nCentral America\nLife expectancy at birth, total (years)\n53.422\n\n\n24\n1975\nEl Salvador\nCentral America\nMortality rate, under-5 (per 1,000 live births)\n130.7"
  },
  {
    "objectID": "scripts/final-data-analysis.html",
    "href": "scripts/final-data-analysis.html",
    "title": "Population Dynamics Analysis",
    "section": "",
    "text": "QTM 350 Final Project Data Analysis\nKatherine Martini\n\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndf = pd.read_csv('final-project-data.csv', encoding='cp1252')\n\nregion_mapping = {\n    'Argentina': 'South America',\n    'Belize': 'Central America',\n    'Costa Rica': 'Central America',\n    'El Salvador': 'Central America',\n    'Guatemala': 'Central America',\n    'Honduras': 'Central America',\n    'Nicaragua': 'Central America',\n    'Panama': 'Central America',\n    'Mexico': 'Central America',\n    'Bolivia': 'South America',\n    'Brazil': 'South America',\n    'Chile': 'South America',\n    'Colombia': 'South America',\n    'Ecuador': 'South America',\n    'Guyana': 'South America',\n    'Paraguay': 'South America',\n    'Peru': 'South America',\n    'Suriname': 'South America',\n    'Uruguay': 'South America',\n    'Venezuela, RB': 'South America',\n    'Cuba': 'Caribbean',\n    'Dominican Republic': 'Caribbean',\n    'Haiti': 'Caribbean',\n    'Jamaica': 'Caribbean',\n    'St. Martin (French part)': 'Caribbean',\n    'Puerto Rico': 'Caribbean',\n}\n\ndf['Region'] = df['Country Name'].map(region_mapping)\n\n\nlife_expectancy_df = df[df['Series Name'] == 'Life expectancy at birth, total (years)'].copy()\nyear_columns = [col for col in df.columns if '[YR' in col]\nlife_expectancy_df.loc[:, year_columns] = life_expectancy_df[year_columns].apply(pd.to_numeric, errors='coerce')\nlife_expectancy_df['Average Life Expectancy'] = life_expectancy_df[year_columns].mean(axis=1)\n\nlife_result = life_expectancy_df[['Region', 'Average Life Expectancy']]\nlife_result = life_result.dropna(subset=['Average Life Expectancy'])\nlife_result = life_result.groupby('Region')['Average Life Expectancy'].mean().reset_index()\nlife_result = life_result.sort_values(by='Average Life Expectancy', ascending=False)\nprint(life_result)\n\n            Region Average Life Expectancy\n0        Caribbean               70.697967\n2    South America               69.356007\n1  Central America               68.988212\n\n\n\nmortality_df = df[df['Series Name'] == 'Mortality rate, under-5 (per 1,000 live births)'].copy()\nmortality_df.loc[:, year_columns] = mortality_df[year_columns].apply(pd.to_numeric, errors='coerce')\nmortality_df['Average Mortality Under 5 yo'] = mortality_df[year_columns].mean(axis=1)\n\nmort_result = mortality_df[['Region', 'Average Mortality Under 5 yo']]\nmort_result = mort_result.dropna(subset=['Average Mortality Under 5 yo'])\nmort_result = mort_result.groupby('Region')['Average Mortality Under 5 yo'].mean().reset_index()\nmort_result = mort_result.sort_values(by='Average Mortality Under 5 yo', ascending=False)\nprint(mort_result)\n\n            Region Average Mortality Under 5 yo\n0        Caribbean                    61.526531\n1  Central America                    41.316837\n2    South America                    40.174876\n\n\n\nfertility_df = df[df['Series Name'] == 'Adolescent fertility rate (births per 1,000 women ages 15-19)'].copy()\nfertility_df.loc[:, year_columns] = fertility_df[year_columns].apply(pd.to_numeric, errors='coerce')\nfertility_df['Average Fertility Rate'] = fertility_df[year_columns].mean(axis=1)\n\nfertility_result = fertility_df[['Region', 'Average Fertility Rate']]\nfertility_result = fertility_result.dropna(subset=['Average Fertility Rate'])\nfertility_result = fertility_result.groupby('Region')['Average Fertility Rate'].mean().reset_index()\nfertility_result = fertility_result.sort_values(by='Average Fertility Rate', ascending=False)\nprint(fertility_result)\n\n            Region Average Fertility Rate\n1  Central America             100.462635\n2    South America              77.902779\n0        Caribbean              65.945947\n\n\n\nimmunization_group = [\n    'Immunization, DPT (% of children ages 12-23 months)',\n    'Immunization, HepB3 (% of one-year-old children)',\n    'Immunization, measles (% of children ages 12-23 months)'\n]\n\nimmunization_df = df[df['Series Name'].isin(immunization_group)].copy()\nimmunization_df.loc[:, year_columns] = immunization_df[year_columns].apply(pd.to_numeric, errors='coerce')\nimmunization_df['Grouped Immunization Average'] = immunization_df[year_columns].mean(axis=1)\n\nimmune_result = immunization_df[['Region', 'Grouped Immunization Average']]\nimmune_result = immune_result.dropna(subset=['Grouped Immunization Average'])\nimmune_result = immune_result.groupby('Region')['Grouped Immunization Average'].mean().reset_index()\nimmune_result = immune_result.sort_values(by='Grouped Immunization Average', ascending=False)\nprint(immune_result)\n\n            Region Grouped Immunization Average\n1  Central America                    84.240333\n2    South America                    80.869707\n0        Caribbean                     74.12531\n\n\n\nhealth_df = df[df['Series Name'] == 'Current health expenditure (% of GDP)'].copy()\nhealth_df.loc[:, year_columns] = health_df[year_columns].apply(pd.to_numeric, errors='coerce')\nhealth_df['Average Health Expenditure'] = health_df[year_columns].mean(axis=1)\n\nhealth_result = health_df[['Region', 'Average Health Expenditure']]\nhealth_result = health_result.dropna(subset=['Average Health Expenditure'])\nhealth_result = health_result.groupby('Region')['Average Health Expenditure'].mean().reset_index()\nhealth_result = health_result.sort_values(by='Average Health Expenditure', ascending=False)\nprint(health_result)\n\n            Region Average Health Expenditure\n1  Central America                   6.785006\n2    South America                   6.429862\n0        Caribbean                   6.312227\n\n\n\nranking_merge = life_result.merge(mort_result, on='Region')\nranking_merge = ranking_merge.merge(fertility_result, on='Region')\nranking_merge = ranking_merge.merge(immune_result, on='Region')\nranking_merge = ranking_merge.merge(health_result, on='Region')\n\nranking_merge['Life Expectancy Rank'] = ranking_merge['Average Life Expectancy'].rank(ascending=False).astype(int)\nranking_merge['Mortality Rank'] = ranking_merge['Average Mortality Under 5 yo'].rank(ascending=True).astype(int)\nranking_merge['Grouped Immunization Rank'] = ranking_merge['Grouped Immunization Average'].rank(ascending=False).astype(int)\nranking_merge['Health Expenditure Rank'] = ranking_merge['Average Health Expenditure'].rank(ascending=False).astype(int)\nranking_merge['Fertility Rank'] = ranking_merge['Average Fertility Rate'].rank(ascending=True).astype(int)\n\nranking_result = ranking_merge[['Region', \n                            'Life Expectancy Rank', \n                            'Mortality Rank', \n                            'Grouped Immunization Rank', \n                            'Health Expenditure Rank', \n                            'Fertility Rank']]\n\nprint(ranking_result.to_markdown(index=False))\n\n| Region          |   Life Expectancy Rank |   Mortality Rank |   Grouped Immunization Rank |   Health Expenditure Rank |   Fertility Rank |\n|:----------------|-----------------------:|-----------------:|----------------------------:|--------------------------:|-----------------:|\n| Caribbean       |                      1 |                3 |                           3 |                         3 |                1 |\n| South America   |                      2 |                1 |                           2 |                         2 |                2 |\n| Central America |                      3 |                2 |                           1 |                         1 |                3 |\n\n\n\n\nfig, ax = plt.subplots(figsize=(16, 4))  #\nax.axis('off')\n\ntable = ax.table(\n    cellText=ranking_result.values,\n    colLabels=ranking_result.columns,\n    cellLoc='center',\n    loc='center'\n)\n\ntable.auto_set_font_size(False)\ntable.set_fontsize(12)\nplt.savefig('health_region_ranking.png', bbox_inches='tight', dpi=150)"
  },
  {
    "objectID": "scripts/Extra_Analysis_Joyce_Chen.html",
    "href": "scripts/Extra_Analysis_Joyce_Chen.html",
    "title": "Population Dynamics Analysis",
    "section": "",
    "text": "Group Members: Katherine Martini, Lucas Lobo, Joyce Chen, Caleb Sharkey  Course: QTM 350  Assignment: Final Project  Date: May 2, 2025  \n\nimport pandas as pd\nimport numpy as np\nfrom scipy.stats import linregress\nimport matplotlib.pyplot as plt\n\n\ndf_wdi = pd.read_csv('QTM350Final.csv', encoding='latin1')\n\n#display(df_wdi)\n\n\nregion_mapping = {\n    'Argentina': 'South America',\n    'Belize': 'Central America',\n    'Costa Rica': 'Central America',\n    'El Salvador': 'Central America',\n    'Guatemala': 'Central America',\n    'Honduras': 'Central America',\n    'Nicaragua': 'Central America',\n    'Panama': 'Central America',\n    'Mexico': 'Central America',\n    'Bolivia': 'South America',\n    'Brazil': 'South America',\n    'Chile': 'South America',\n    'Colombia': 'South America',\n    'Ecuador': 'South America',\n    'Guyana': 'South America',\n    'Paraguay': 'South America',\n    'Peru': 'South America',\n    'Suriname': 'South America',\n    'Uruguay': 'South America',\n    'Venezuela, RB': 'South America',\n    'Cuba': 'Caribbean',\n    'Dominican Republic': 'Caribbean',\n    'Haiti': 'Caribbean',\n    'Jamaica': 'Caribbean',\n    'St. Martin (French part)': 'Caribbean',\n    'Puerto Rico': 'Caribbean',\n}\n\n\n# Add the Region column\ndf_wdi['Region'] = df_wdi['Country Name'].map(region_mapping)\n\n# Define a function to find the highest and lowest values for a given metric\ndef analyze_metric(df, metric_name):\n    metric_df = df[df['Series Name'] == metric_name].copy()\n    year_columns = [col for col in df.columns if '[YR' in col]\n    metric_df.loc[:, year_columns] = metric_df[year_columns].apply(pd.to_numeric, errors='coerce')\n    metric_df['Average Value'] = metric_df[year_columns].mean(axis=1)\n    \n    # Group by region and find the highest and lowest values\n    grouped = metric_df.groupby('Region')\n    highest = grouped.apply(lambda x: x.loc[x['Average Value'].idxmax(), ['Country Name', 'Average Value']])\n    lowest = grouped.apply(lambda x: x.loc[x['Average Value'].idxmin(), ['Country Name', 'Average Value']])\n    \n    return highest, lowest\n\n\n# 1. Life expectancy at birth, total (years)\nlife_expectancy_highest, life_expectancy_lowest = analyze_metric(\n    df_wdi, 'Life expectancy at birth, total (years)'\n)\nprint(\"Life Expectancy (Highest):\")\nprint(life_expectancy_highest)\nprint(\"\\nLife Expectancy (Lowest):\")\nprint(life_expectancy_lowest)\n\nLife Expectancy (Highest):\n                             Country Name  Average Value\nRegion                                                  \nCaribbean        St. Martin (French part)      76.319592\nCentral America                Costa Rica      76.953000\nSouth America                       Chile      75.545469\n\nLife Expectancy (Lowest):\n                Country Name  Average Value\nRegion                                     \nCaribbean              Haiti      56.766245\nCentral America    Guatemala      64.522265\nSouth America        Bolivia      60.270714\n\n\n/var/folders/dg/c6hqd29d2t9826r1jy81880m0000gn/T/ipykernel_33708/1184167815.py:13: DeprecationWarning: DataFrameGroupBy.apply operated on the grouping columns. This behavior is deprecated, and in a future version of pandas the grouping columns will be excluded from the operation. Either pass `include_groups=False` to exclude the groupings or explicitly select the grouping columns after groupby to silence this warning.\n  highest = grouped.apply(lambda x: x.loc[x['Average Value'].idxmax(), ['Country Name', 'Average Value']])\n/var/folders/dg/c6hqd29d2t9826r1jy81880m0000gn/T/ipykernel_33708/1184167815.py:14: DeprecationWarning: DataFrameGroupBy.apply operated on the grouping columns. This behavior is deprecated, and in a future version of pandas the grouping columns will be excluded from the operation. Either pass `include_groups=False` to exclude the groupings or explicitly select the grouping columns after groupby to silence this warning.\n  lowest = grouped.apply(lambda x: x.loc[x['Average Value'].idxmin(), ['Country Name', 'Average Value']])\n\n\n\n# 2. Mortality rate, under-5 (per 1,000 live births)\nmortality_highest, mortality_lowest = analyze_metric(\n    df_wdi, 'Mortality rate, under-5 (per 1,000 live births)'\n)\nprint(\"\\nMortality Rate (Highest):\")\nprint(mortality_highest)\nprint(\"\\nMortality Rate (Lowest):\")\nprint(mortality_lowest)\n\n\nMortality Rate (Highest):\n                Country Name  Average Value\nRegion                                     \nCaribbean              Haiti     120.226531\nCentral America    Guatemala      66.069388\nSouth America        Bolivia      90.569388\n\nMortality Rate (Lowest):\n                Country Name  Average Value\nRegion                                     \nCaribbean               Cuba      11.965306\nCentral America   Costa Rica      16.157143\nSouth America          Chile      17.112245\n\n\n/var/folders/dg/c6hqd29d2t9826r1jy81880m0000gn/T/ipykernel_33708/1184167815.py:13: DeprecationWarning: DataFrameGroupBy.apply operated on the grouping columns. This behavior is deprecated, and in a future version of pandas the grouping columns will be excluded from the operation. Either pass `include_groups=False` to exclude the groupings or explicitly select the grouping columns after groupby to silence this warning.\n  highest = grouped.apply(lambda x: x.loc[x['Average Value'].idxmax(), ['Country Name', 'Average Value']])\n/var/folders/dg/c6hqd29d2t9826r1jy81880m0000gn/T/ipykernel_33708/1184167815.py:14: DeprecationWarning: DataFrameGroupBy.apply operated on the grouping columns. This behavior is deprecated, and in a future version of pandas the grouping columns will be excluded from the operation. Either pass `include_groups=False` to exclude the groupings or explicitly select the grouping columns after groupby to silence this warning.\n  lowest = grouped.apply(lambda x: x.loc[x['Average Value'].idxmin(), ['Country Name', 'Average Value']])\n\n\n\n# 3. Adolescent fertility rate (births per 1,000 women ages 15-19)\nfertility_highest, fertility_lowest = analyze_metric(\n    df_wdi, 'Adolescent fertility rate (births per 1,000 women ages 15-19)'\n)\nprint(\"\\nAdolescent Fertility Rate (Highest):\")\nprint(fertility_highest)\nprint(\"\\nAdolescent Fertility Rate (Lowest):\")\nprint(fertility_lowest)\n\n\nAdolescent Fertility Rate (Highest):\n                       Country Name  Average Value\nRegion                                            \nCaribbean        Dominican Republic      99.143898\nCentral America           Nicaragua     126.473429\nSouth America                Guyana      97.110224\n\nAdolescent Fertility Rate (Lowest):\n                             Country Name  Average Value\nRegion                                                  \nCaribbean        St. Martin (French part)      35.587714\nCentral America                Costa Rica      75.293102\nSouth America                       Chile      55.050367\n\n\n/var/folders/dg/c6hqd29d2t9826r1jy81880m0000gn/T/ipykernel_33708/1184167815.py:13: DeprecationWarning: DataFrameGroupBy.apply operated on the grouping columns. This behavior is deprecated, and in a future version of pandas the grouping columns will be excluded from the operation. Either pass `include_groups=False` to exclude the groupings or explicitly select the grouping columns after groupby to silence this warning.\n  highest = grouped.apply(lambda x: x.loc[x['Average Value'].idxmax(), ['Country Name', 'Average Value']])\n/var/folders/dg/c6hqd29d2t9826r1jy81880m0000gn/T/ipykernel_33708/1184167815.py:14: DeprecationWarning: DataFrameGroupBy.apply operated on the grouping columns. This behavior is deprecated, and in a future version of pandas the grouping columns will be excluded from the operation. Either pass `include_groups=False` to exclude the groupings or explicitly select the grouping columns after groupby to silence this warning.\n  lowest = grouped.apply(lambda x: x.loc[x['Average Value'].idxmin(), ['Country Name', 'Average Value']])\n\n\n\n# Filter the dataset for the three variables\nlife_expectancy = df_wdi[df_wdi['Series Name'] == 'Life expectancy at birth, total (years)']\nmortality_rate = df_wdi[df_wdi['Series Name'] == 'Mortality rate, under-5 (per 1,000 live births)']\nfertility_rate = df_wdi[df_wdi['Series Name'] == 'Adolescent fertility rate (births per 1,000 women ages 15-19)']\n\n# Extract year columns and calculate averages\nyear_columns = [col for col in map(str, df_wdi.columns) if '[YR' in col]\n\n# Calculate the average values for each variable\nlife_expectancy['Average Value'] = life_expectancy[year_columns].apply(pd.to_numeric, errors='coerce').mean(axis=1)\nmortality_rate['Average Value'] = mortality_rate[year_columns].apply(pd.to_numeric, errors='coerce').mean(axis=1)\nfertility_rate['Average Value'] = fertility_rate[year_columns].apply(pd.to_numeric, errors='coerce').mean(axis=1)\n\n# Merge the datasets on 'Country Name' for scatterplots\nmerged_df = life_expectancy[['Country Name', 'Average Value']].merge(\n    mortality_rate[['Country Name', 'Average Value']],\n    on='Country Name',\n    suffixes=('_LifeExpectancy', '_MortalityRate')\n).merge(\n    fertility_rate[['Country Name', 'Average Value']],\n    on='Country Name'\n)\nmerged_df.rename(columns={'Average Value': 'AdolescentFertilityRate'}, inplace=True)\n\n/var/folders/dg/c6hqd29d2t9826r1jy81880m0000gn/T/ipykernel_33708/3944970657.py:10: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  life_expectancy['Average Value'] = life_expectancy[year_columns].apply(pd.to_numeric, errors='coerce').mean(axis=1)\n/var/folders/dg/c6hqd29d2t9826r1jy81880m0000gn/T/ipykernel_33708/3944970657.py:11: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  mortality_rate['Average Value'] = mortality_rate[year_columns].apply(pd.to_numeric, errors='coerce').mean(axis=1)\n/var/folders/dg/c6hqd29d2t9826r1jy81880m0000gn/T/ipykernel_33708/3944970657.py:12: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  fertility_rate['Average Value'] = fertility_rate[year_columns].apply(pd.to_numeric, errors='coerce').mean(axis=1)\n\n\n\n# Ensure no NaN values in the data for each scatterplot\nvalid_data1 = merged_df[['Average Value_LifeExpectancy', 'Average Value_MortalityRate']].dropna()\nx1 = valid_data1['Average Value_LifeExpectancy']\ny1 = valid_data1['Average Value_MortalityRate']\n\nvalid_data2 = merged_df[['Average Value_LifeExpectancy', 'AdolescentFertilityRate']].dropna()\nx2 = valid_data2['Average Value_LifeExpectancy']\ny2 = valid_data2['AdolescentFertilityRate']\n\nvalid_data3 = merged_df[['Average Value_MortalityRate', 'AdolescentFertilityRate']].dropna()\nx3 = valid_data3['Average Value_MortalityRate']\ny3 = valid_data3['AdolescentFertilityRate']\n\n\n# Scatterplot 1: Life Expectancy vs Mortality Rate\nplt.figure(figsize=(8, 6))\nplt.scatter(merged_df['Average Value_LifeExpectancy'], merged_df['Average Value_MortalityRate'], alpha=0.7)\nplt.title('Life Expectancy vs Mortality Rate')\nplt.xlabel('Life Expectancy (years)')\nplt.ylabel('Mortality Rate (per 1,000 live births)')\nplt.grid(True)\nplt.show()\n\n\n\n\n\n\n\n\n\n# Scatterplot 1: Life Expectancy vs Mortality Rate with regression line\nslope1, intercept1, r_value1, p_value1, std_err1 = linregress(x1, y1)\nplt.figure(figsize=(8, 6))\nplt.scatter(x1, y1, alpha=0.7, label='Data Points')\nplt.plot(x1, slope1 * x1 + intercept1, color='red', label=f'Best Fit Line (R²={r_value1**2:.2f})')\nplt.title('Life Expectancy vs Mortality Rate')\nplt.xlabel('Life Expectancy (years)')\nplt.ylabel('Mortality Rate (per 1,000 live births)')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n\n\n\n\n\n\n\n\n# Scatterplot 2: Life Expectancy vs Adolescent Fertility Rate\nplt.figure(figsize=(8, 6))\nplt.scatter(merged_df['Average Value_LifeExpectancy'], merged_df['AdolescentFertilityRate'], alpha=0.7)\nplt.title('Life Expectancy vs Adolescent Fertility Rate')\nplt.xlabel('Life Expectancy (years)')\nplt.ylabel('Adolescent Fertility Rate (per 1,000 women)')\nplt.grid(True)\nplt.show()\n\n\n\n\n\n\n\n\n\n# Scatterplot 2: Life Expectancy vs Adolescent Fertility Rate with regression line\nx2 = merged_df['Average Value_LifeExpectancy']\ny2 = merged_df['AdolescentFertilityRate']\nslope2, intercept2, r_value2, p_value2, std_err2 = linregress(x2, y2)\n\nplt.figure(figsize=(8, 6))\nplt.scatter(x2, y2, alpha=0.7, label='Data Points')\nplt.plot(x2, slope2 * x2 + intercept2, color='red', label=f'Best Fit Line (R²={r_value2**2:.2f})')\nplt.title('Life Expectancy vs Adolescent Fertility Rate')\nplt.xlabel('Life Expectancy (years)')\nplt.ylabel('Adolescent Fertility Rate (per 1,000 women)')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n\n\n\n\n\n\n\n\n# Scatterplot 3: Mortality Rate vs Adolescent Fertility Rate\nplt.figure(figsize=(8, 6))\nplt.scatter(merged_df['Average Value_MortalityRate'], merged_df['AdolescentFertilityRate'], alpha=0.7)\nplt.title('Mortality Rate vs Adolescent Fertility Rate')\nplt.xlabel('Mortality Rate (per 1,000 live births)')\nplt.ylabel('Adolescent Fertility Rate (per 1,000 women)')\nplt.grid(True)\nplt.show()\n\n\n\n\n\n\n\n\n\n# Scatterplot 3: Mortality Rate vs Adolescent Fertility Rate with regression line\nslope3, intercept3, r_value3, p_value3, std_err3 = linregress(x3, y3)\nplt.figure(figsize=(8, 6))\nplt.scatter(x3, y3, alpha=0.7, label='Data Points')\nplt.plot(x3, slope3 * x3 + intercept3, color='red', label=f'Best Fit Line (R²={r_value3**2:.2f})')\nplt.title('Mortality Rate vs Adolescent Fertility Rate')\nplt.xlabel('Mortality Rate (per 1,000 live births)')\nplt.ylabel('Adolescent Fertility Rate (per 1,000 women)')\nplt.legend()\nplt.grid(True)\nplt.show()"
  },
  {
    "objectID": "scripts/qtm350 - data analysis addendum [reformatted] - caleb.html",
    "href": "scripts/qtm350 - data analysis addendum [reformatted] - caleb.html",
    "title": "Population Dynamics Analysis",
    "section": "",
    "text": "# Relevant packages:\nimport sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Loading the WDI data as a csv (using pandas):\ndf = pd.read_csv(r\"QTM350 Final Project Data.csv\", encoding='latin1')\n\n# Set up connection:\nconn = sqlite3.connect(r\"qtm350_project.db\")\ncursor = conn.cursor()\n\n# Write 'df' to SQL:\ncursor.execute(\"DROP TABLE IF EXISTS wdi;\")\ndf.to_sql('wdi', conn, if_exists='replace', index=False)\n\n542\n\n\n\n# new, cleaned dataframe\n# 1: create a new 'year' list (to replace the current format)\nyear_columns = [\n    f'\"{year} [YR{year}]\" AS \"{year}\"' for year in range(1975, 2025)\n]\n\n# 2: new table only with relevant columns: country_name, indicator, and years \ncursor.execute(\"DROP TABLE IF EXISTS wdi_renamed;\")\nq_keep = f\"\"\"\nCREATE TABLE wdi_renamed AS\nSELECT \n    \"Country Name\" AS country_name,\n    \"Series Name\" AS indicator,\n    {', '.join(year_columns)}\nFROM wdi\n\"\"\"\nconn.execute(q_keep)\n\n&lt;sqlite3.Cursor at 0x147eec9c0&gt;\n\n\n\npd.read_sql(\"SELECT * FROM wdi_renamed\", conn).head()\n\n\n\n\n\n\n\n\ncountry_name\nindicator\n1975\n1976\n1977\n1978\n1979\n1980\n1981\n1982\n...\n2015\n2016\n2017\n2018\n2019\n2020\n2021\n2022\n2023\n2024\n\n\n\n\n0\nArgentina\nLife expectancy at birth, total (years)\n66.965\n67.03\n67.595\n67.999\n68.434\n68.576\n68.858\n68.973\n...\n76.6\n76.105\n76.543\n76.77\n76.847\n75.878\n73.948\n75.806\n77.395\n..\n\n\n1\nArgentina\nMortality rate, under-5 (per 1,000 live births)\n63.3\n59.8\n55.6\n51.2\n46.8\n42.8\n39.4\n36.5\n...\n11.7\n11.4\n11\n10.7\n10.5\n10.3\n10\n9.8\n9.6\n..\n\n\n2\nArgentina\nAdolescent fertility rate (births per 1,000 wo...\n73.076\n74.913\n76.634\n77.695\n78.328\n77.928\n76.742\n74.387\n...\n63.879\n58.79\n55.022\n49.926\n41.751\n31.492\n28.54\n25.767\n26.414\n..\n\n\n3\nArgentina\nPrevalence of HIV, total (% of population ages...\n..\n..\n..\n..\n..\n..\n..\n..\n...\n0.4\n0.4\n0.4\n0.4\n0.4\n0.4\n0.4\n0.4\n..\n..\n\n\n4\nArgentina\nImmunization, DPT (% of children ages 12-23 mo...\n..\n..\n..\n..\n..\n44\n49\n58\n...\n94\n92\n86\n86\n83\n74\n81\n84\n66\n..\n\n\n\n\n5 rows × 52 columns\n\n\n\n\nconn.execute(\"DROP TABLE IF EXISTS wdi_region;\")\n\n# writes an implicit 'if else' function in sql to create a new column 'region' based on the country name by using CASE WHEN/ELSE statements.\nq_region = \"\"\"\nCREATE TABLE wdi_region AS\nSELECT \n    country_name,\n    CASE\n        WHEN country_name IN (\n            'Belize', 'Costa Rica', 'El Salvador', 'Guatemala', 'Honduras', 'Nicaragua', 'Panama', 'Mexico', 'Bolivia'\n        ) THEN 'Central America'\n        WHEN country_name IN (\n            'Argentina', 'Brazil', 'Chile', 'Colombia', 'Ecuador', 'Guyana', 'Paraguay', 'Peru', 'Suriname', 'Uruguay', 'Venezuela, RB'\n        ) THEN 'South America'\n        WHEN country_name IN (\n            'Cuba', 'Dominican Republic', 'Haiti', 'Jamaica', 'St. Martin (French part)', 'Puerto Rico'\n        ) THEN 'Caribbean'\n        ELSE 'Other'\n    END AS region,\n    indicator,\n    \"1975\", \"1976\", \"1977\", \"1978\", \"1979\", \"1980\", \"1981\", \"1982\", \"1983\", \"1984\", \"1985\", \"1986\", \"1987\", \"1988\", \"1989\",\n    \"1990\", \"1991\", \"1992\", \"1993\", \"1994\", \"1995\", \"1996\", \"1997\", \"1998\", \"1999\", \"2000\", \"2001\", \"2002\", \"2003\", \"2004\", \n    \"2005\", \"2006\", \"2007\", \"2008\", \"2009\", \"2010\", \"2011\", \"2012\", \"2013\", \"2014\", \"2015\", \"2016\", \"2017\", \"2018\", \"2019\",\n    \"2020\", \"2021\", \"2022\", \"2023\", \"2024\"\nFROM wdi_renamed\n\"\"\"\n\nconn.execute(q_region)\n\n&lt;sqlite3.Cursor at 0x147eedcc0&gt;\n\n\n\nconn.execute(\"DROP TABLE IF EXISTS wdi_long_clean;\")\nq_filter_non_null = \"\"\"\nCREATE TABLE wdi_long_clean AS\nSELECT *\nFROM wdi_long\nWHERE value IS NOT NULL AND value != '..'\n\"\"\"\nconn.execute(q_filter_non_null)\n\n&lt;sqlite3.Cursor at 0x147eefcc0&gt;\n\n\n\n# Here's a sample of the cleaned data:\npd.read_sql(\"SELECT * FROM wdi_long_clean\", conn).head(25)\n\n\n\n\n\n\n\n\nyear\ncountry_name\nregion\nindicator\nvalue\n\n\n\n\n0\n1975\nArgentina\nSouth America\nLife expectancy at birth, total (years)\n66.965\n\n\n1\n1975\nArgentina\nSouth America\nMortality rate, under-5 (per 1,000 live births)\n63.3\n\n\n2\n1975\nArgentina\nSouth America\nAdolescent fertility rate (births per 1,000 wo...\n73.076\n\n\n3\n1975\nArgentina\nSouth America\nUrban population\n20950006\n\n\n4\n1975\nArgentina\nSouth America\nUnemployment, total (% of total labor force) (...\n2.3\n\n\n5\n1975\nArgentina\nSouth America\nTrade (% of GDP)\n11.80272429\n\n\n6\n1975\nArgentina\nSouth America\nSurface area (sq. km)\n2780400\n\n\n7\n1975\nArgentina\nSouth America\nSchool enrollment, primary (% net)\n96.32775\n\n\n8\n1975\nArgentina\nSouth America\nRural population\n4924101\n\n\n9\n1975\nBelize\nCentral America\nLife expectancy at birth, total (years)\n65.377\n\n\n10\n1975\nBelize\nCentral America\nMortality rate, under-5 (per 1,000 live births)\n80\n\n\n11\n1975\nBelize\nCentral America\nAdolescent fertility rate (births per 1,000 wo...\n142.49\n\n\n12\n1975\nBelize\nCentral America\nUrban population\n65416\n\n\n13\n1975\nBelize\nCentral America\nSurface area (sq. km)\n22970\n\n\n14\n1975\nBelize\nCentral America\nRural population\n64971\n\n\n15\n1975\nCosta Rica\nCentral America\nLife expectancy at birth, total (years)\n70.253\n\n\n16\n1975\nCosta Rica\nCentral America\nMortality rate, under-5 (per 1,000 live births)\n45.4\n\n\n17\n1975\nCosta Rica\nCentral America\nAdolescent fertility rate (births per 1,000 wo...\n91.632\n\n\n18\n1975\nCosta Rica\nCentral America\nUrban population\n865318\n\n\n19\n1975\nCosta Rica\nCentral America\nTrade (% of GDP)\n68.60978582\n\n\n20\n1975\nCosta Rica\nCentral America\nSurface area (sq. km)\n51100\n\n\n21\n1975\nCosta Rica\nCentral America\nSchool enrollment, primary (% net)\n90.45446\n\n\n22\n1975\nCosta Rica\nCentral America\nRural population\n1227401\n\n\n23\n1975\nEl Salvador\nCentral America\nLife expectancy at birth, total (years)\n53.422\n\n\n24\n1975\nEl Salvador\nCentral America\nMortality rate, under-5 (per 1,000 live births)\n130.7\n\n\n\n\n\n\n\n\nq1_a = \"\"\"\nSELECT country_name, AVG(value) AS avg_life_exp\nFROM wdi_long_clean\nWHERE indicator = 'Life expectancy at birth, total (years)'\nGROUP BY country_name\nORDER BY avg_life_exp DESC\nLIMIT 10\n\"\"\"\nq1_a_table = pd.read_sql(q1_a, conn)\nprint(q1_a_table)\n\n               country_name  avg_life_exp\n0                Costa Rica     76.953000\n1  St. Martin (French part)     76.319592\n2               Puerto Rico     75.974449\n3                     Chile     75.545469\n4                      Cuba     75.323898\n5                   Uruguay     74.259551\n6                    Panama     73.476163\n7                 Argentina     73.002898\n8             Venezuela, RB     71.322490\n9                  Colombia     71.205878\n\n\n\nq1_b = \"\"\"\nSELECT country_name, AVG(value) AS avg_life_exp\nFROM wdi_long_clean\nWHERE indicator = 'Life expectancy at birth, total (years)'\n  AND year IN ('1980', '1981', '1982', '1983', '1984', '1985', '1986', '1987', '1988', '1989')\nGROUP BY country_name\nORDER BY avg_life_exp DESC\nLIMIT 10\n\"\"\"\nq1_b_table = pd.read_sql(q1_b, conn)\nprint(q1_b_table)\n\n               country_name  avg_life_exp\n0                Costa Rica       74.5500\n1                      Cuba       73.4186\n2               Puerto Rico       73.0772\n3  St. Martin (French part)       73.0160\n4                   Uruguay       71.7568\n5                     Chile       71.3751\n6                    Panama       70.2783\n7                 Argentina       69.8508\n8             Venezuela, RB       69.7803\n9                    Belize       68.2004\n\n\n\nq1_c = \"\"\"\nSELECT country_name, AVG(value) AS avg_life_exp\nFROM wdi_long_clean\nWHERE indicator = 'Life expectancy at birth, total (years)'\n  AND year IN ('2010', '2011', '2012', '2013', '2014', '2015', '2016', '2017', '2018', '2019')\nGROUP BY country_name\nORDER BY avg_life_exp DESC\nLIMIT 10\n\"\"\"\nq1_c_table = pd.read_sql(q1_c, conn)\nprint(q1_c_table)\n\n               country_name  avg_life_exp\n0                Costa Rica       80.0098\n1               Puerto Rico       79.9724\n2                     Chile       79.8613\n3  St. Martin (French part)       79.4908\n4                      Cuba       77.7397\n5                    Panama       77.4483\n6                   Uruguay       77.1427\n7                 Argentina       76.2544\n8                   Ecuador       76.0896\n9                  Colombia       75.9536\n\n\n\nq2 = \"\"\"\nSELECT country_name,\n       MAX(CASE WHEN indicator = 'Immunization, DPT (% of children ages 12-23 months)' THEN value END) AS max_dpt,\n       MAX(CASE WHEN indicator = 'Immunization, HepB3 (% of one-year-old children)' THEN value END) AS max_hepb3,\n       MAX(CASE WHEN indicator = 'Immunization, measles (% of children ages 12-23 months)' THEN value END) AS max_measles,\n       (MAX(CASE WHEN indicator = 'Immunization, DPT (% of children ages 12-23 months)' THEN value END) +\n        MAX(CASE WHEN indicator = 'Immunization, HepB3 (% of one-year-old children)' THEN value END) +\n        MAX(CASE WHEN indicator = 'Immunization, measles (% of children ages 12-23 months)' THEN value END)) / 3 AS agg_immunization_rate\nFROM wdi_long_clean\nWHERE indicator IN (\n    'Immunization, DPT (% of children ages 12-23 months)',\n    'Immunization, HepB3 (% of one-year-old children)',\n    'Immunization, measles (% of children ages 12-23 months)'\n)\nGROUP BY country_name\nORDER BY agg_immunization_rate DESC\nLIMIT 23;\n\"\"\"\nq2_table = pd.read_sql(q2, conn)\nprint(q2_table)\n\n          country_name max_dpt max_hepb3 max_measles  agg_immunization_rate\n0               Mexico      99        99          99                     99\n1             Honduras      99        99          99                     99\n2               Guyana      99        99          99                     99\n3          El Salvador      99        99          99                     99\n4                 Cuba      99        99          99                     99\n5               Brazil      99        99          99                     99\n6               Panama      99        98          99                     98\n7            Nicaragua      98        98          99                     98\n8           Costa Rica      99        98          99                     98\n9                Chile      99        97          99                     98\n10              Belize      98        98          99                     98\n11             Uruguay      97        96          99                     97\n12                Peru      99        95          98                     97\n13             Ecuador      96        96          99                     97\n14           Argentina      98        94          99                     97\n15           Guatemala      96        96          96                     96\n16            Paraguay      98        93          96                     95\n17             Bolivia      95        95          96                     95\n18            Colombia      94        95          95                     94\n19  Dominican Republic      91        90          96                     92\n20       Venezuela, RB      87        88          98                     91\n21            Suriname      94        87          91                     90\n22               Haiti       9        68           8                     28\n\n\n\nregion_mapping = {\n    'Argentina': 'South America',\n    'Belize': 'Central America',\n    'Costa Rica': 'Central America',\n    'El Salvador': 'Central America',\n    'Guatemala': 'Central America',\n    'Honduras': 'Central America',\n    'Nicaragua': 'Central America',\n    'Panama': 'Central America',\n    'Mexico': 'Central America',\n    'Bolivia': 'South America',\n    'Brazil': 'South America',\n    'Chile': 'South America',\n    'Colombia': 'South America',\n    'Ecuador': 'South America',\n    'Guyana': 'South America',\n    'Paraguay': 'South America',\n    'Peru': 'South America',\n    'Suriname': 'South America',\n    'Uruguay': 'South America',\n    'Venezuela, RB': 'South America',\n    'Cuba': 'Caribbean',\n    'Dominican Republic': 'Caribbean',\n    'Haiti': 'Caribbean',\n    'Jamaica': 'Caribbean',\n    'St. Martin (French part)': 'Caribbean',\n    'Puerto Rico': 'Caribbean',\n}\n\n\n# Add the Region column\ndf['Region'] = df['Country Name'].map(region_mapping)\n\n# Filtering out countries not defined in our region mapping\ndf = df[df['Region'].notna()]\n\n\ndf.head()\n\n\n\n\n\n\n\n\nCountry Name\nCountry Code\nSeries Name\nSeries Code\n1975 [YR1975]\n1976 [YR1976]\n1977 [YR1977]\n1978 [YR1978]\n1979 [YR1979]\n1980 [YR1980]\n...\n2016 [YR2016]\n2017 [YR2017]\n2018 [YR2018]\n2019 [YR2019]\n2020 [YR2020]\n2021 [YR2021]\n2022 [YR2022]\n2023 [YR2023]\n2024 [YR2024]\nRegion\n\n\n\n\n0\nArgentina\nARG\nLife expectancy at birth, total (years)\nSP.DYN.LE00.IN\n66.965\n67.03\n67.595\n67.999\n68.434\n68.576\n...\n76.105\n76.543\n76.77\n76.847\n75.878\n73.948\n75.806\n77.395\n..\nSouth America\n\n\n1\nArgentina\nARG\nMortality rate, under-5 (per 1,000 live births)\nSH.DYN.MORT\n63.3\n59.8\n55.6\n51.2\n46.8\n42.8\n...\n11.4\n11\n10.7\n10.5\n10.3\n10\n9.8\n9.6\n..\nSouth America\n\n\n2\nArgentina\nARG\nAdolescent fertility rate (births per 1,000 wo...\nSP.ADO.TFRT\n73.076\n74.913\n76.634\n77.695\n78.328\n77.928\n...\n58.79\n55.022\n49.926\n41.751\n31.492\n28.54\n25.767\n26.414\n..\nSouth America\n\n\n3\nArgentina\nARG\nPrevalence of HIV, total (% of population ages...\nSH.DYN.AIDS.ZS\n..\n..\n..\n..\n..\n..\n...\n0.4\n0.4\n0.4\n0.4\n0.4\n0.4\n0.4\n..\n..\nSouth America\n\n\n4\nArgentina\nARG\nImmunization, DPT (% of children ages 12-23 mo...\nSH.IMM.IDPT\n..\n..\n..\n..\n..\n44\n...\n92\n86\n86\n83\n74\n81\n84\n66\n..\nSouth America\n\n\n\n\n5 rows × 55 columns\n\n\n\n\n# Fix year columns\nyear_columns = [col for col in df.columns if '[YR' in col]\n\n# Melt from wide to long format\ndf_long = df.melt(\n    id_vars=['Country Name', 'Country Code', 'Region', 'Series Name', 'Series Code'],\n    value_vars=year_columns,\n    var_name='Year',\n    value_name='Value'\n)\n\n# Clean Year (remove [YRxxxx] formatting)\ndf_long['Year'] = df_long['Year'].str.extract('(\\d+)').astype(int)\n\n# Clean Value: Turn '..' into NaN, ensure numeric\ndf_long['Value'] = pd.to_numeric(df_long['Value'], errors='coerce')\n\n# Now your structure is:\n# Country Name | Country Code | Region | Series Name | Series Code | Year | Value\nprint(df_long.head())\n\n  Country Name Country Code         Region  \\\n0    Argentina          ARG  South America   \n1    Argentina          ARG  South America   \n2    Argentina          ARG  South America   \n3    Argentina          ARG  South America   \n4    Argentina          ARG  South America   \n\n                                         Series Name     Series Code  Year  \\\n0            Life expectancy at birth, total (years)  SP.DYN.LE00.IN  1975   \n1    Mortality rate, under-5 (per 1,000 live births)     SH.DYN.MORT  1975   \n2  Adolescent fertility rate (births per 1,000 wo...     SP.ADO.TFRT  1975   \n3  Prevalence of HIV, total (% of population ages...  SH.DYN.AIDS.ZS  1975   \n4  Immunization, DPT (% of children ages 12-23 mo...     SH.IMM.IDPT  1975   \n\n    Value  \n0  66.965  \n1  63.300  \n2  73.076  \n3     NaN  \n4     NaN  \n\n\n\n# Filter only Life Expectancy\nlife_exp = df_long[df_long['Series Name'] == 'Life expectancy at birth, total (years)'].copy()\n\n# Group by Region and Year, and take average across countries\nregion_life_exp = life_exp.groupby(['Region', 'Year'])['Value'].mean().reset_index()\n\n# Plot\nplt.figure(figsize=(14,8))\nsns.lineplot(\n    data=region_life_exp,\n    x='Year',\n    y='Value',\n    hue='Region',\n    marker='o'\n)\n\nplt.title('Average Life Expectancy Over Time by Region')\nplt.xlabel('Year')\nplt.ylabel('Life Expectancy (years)')\nplt.grid(True)\nplt.legend(title='Region')\nplt.show()\n\n/opt/anaconda3/lib/python3.11/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n  with pd.option_context('mode.use_inf_as_na', True):\n/opt/anaconda3/lib/python3.11/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n  with pd.option_context('mode.use_inf_as_na', True):\n\n\n\n\n\n\n\n\n\n\n# Filter only Mortality Rate\nmortality = df_long[df_long['Series Name'] == 'Mortality rate, under-5 (per 1,000 live births)'].copy()\n\n# Group by Region and Year, and average across countries\nregion_mortality = mortality.groupby(['Region', 'Year'])['Value'].mean().reset_index()\n\n# Plot\nplt.figure(figsize=(14,8))\nsns.lineplot(\n    data=region_mortality,\n    x='Year',\n    y='Value',\n    hue='Region',\n    marker='o'\n)\n\nplt.title('Average Mortality Rate (Under-5) Over Time by Region')\nplt.xlabel('Year')\nplt.ylabel('Mortality Rate (per 1,000 live births)')\nplt.grid(True)\nplt.legend(title='Region')\nplt.show()\n\n/opt/anaconda3/lib/python3.11/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n  with pd.option_context('mode.use_inf_as_na', True):\n/opt/anaconda3/lib/python3.11/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n  with pd.option_context('mode.use_inf_as_na', True):\n\n\n\n\n\n\n\n\n\n\n# Filter only Adolescent Fertility Rate\nadolescent_fertility = df_long[df_long['Series Name'] == 'Adolescent fertility rate (births per 1,000 women ages 15-19)'].copy()\n\n# Group by Region and Year, and average across countries\nregion_adolescent_fertility = adolescent_fertility.groupby(['Region', 'Year'])['Value'].mean().reset_index()\n\n# Plot\nplt.figure(figsize=(14,8))\nsns.lineplot(\n    data=region_adolescent_fertility,\n    x='Year',\n    y='Value',\n    hue='Region',\n    marker='o'\n)\n\nplt.title('Average Adolescent Fertility Rate Over Time by Region')\nplt.xlabel('Year')\nplt.ylabel('Adolescent Fertility Rate (births per 1,000 women ages 15-19)')\nplt.grid(True)\nplt.legend(title='Region')\nplt.show()\n\n/opt/anaconda3/lib/python3.11/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n  with pd.option_context('mode.use_inf_as_na', True):\n/opt/anaconda3/lib/python3.11/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n  with pd.option_context('mode.use_inf_as_na', True):\n\n\n\n\n\n\n\n\n\n\n# Investigating sharp spikes for Caribbean region\n\n# Step 1: Focus on Caribbean mortality\ncaribbean_mortality = mortality[mortality['Region'] == 'Caribbean'].copy()\ncaribbean_life_exp = life_exp[life_exp['Region'] == 'Caribbean'].copy()\n\n# Step 2: Choose a suspicious year range (e.g., 2000-2024)\nsuspect_mort_years = caribbean_mortality[(caribbean_mortality['Year'] &gt;= 2009) & (caribbean_mortality['Year'] &lt;= 2011)]\nsuspect_life_years = caribbean_life_exp[(caribbean_life_exp['Year'] &gt;= 2009) & (caribbean_life_exp['Year'] &lt;= 2011)]\n\n\n# Step 3: See country-level stats year by year\npivot_mort = suspect_mort_years.pivot_table(\n    index='Year',\n    columns='Country Name',\n    values='Value'\n)\n\npivot_life = suspect_life_years.pivot_table(\n    index='Year',\n    columns='Country Name',\n    values='Value'\n)\n\nprint(pivot_mort)\nprint(pivot_life)\n\nCountry Name  Cuba  Dominican Republic  Haiti\nYear                                         \n2009           6.3                35.2   81.1\n2010           6.2                35.1  136.7\n2011           6.1                35.0   77.4\nCountry Name    Cuba  Dominican Republic   Haiti  Puerto Rico  \\\nYear                                                            \n2009          77.584              71.587  61.694       78.377   \n2010          77.876              72.039  45.577       78.717   \n2011          78.051              72.496  61.581       78.766   \n\nCountry Name  St. Martin (French part)  \nYear                                    \n2009                            78.513  \n2010                            78.752  \n2011                            79.016"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Population Dynamics Website",
    "section": "",
    "text": "1 Welcome\nThis website presents an analysis of population indicators, including life expectancy, mortality rate, and adolescent fertility across different regions.\nNavigate to the Final Report to view full details and visualizations."
  },
  {
    "objectID": "scripts/final-visualizations.html",
    "href": "scripts/final-visualizations.html",
    "title": "Population Dynamics Analysis",
    "section": "",
    "text": "QTM 350 Final Project Data Visualizations\nKatherine Martini\n\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\ndf = pd.read_csv('final-project-data.csv', encoding='cp1252')\n\n\nregion_mapping = {\n    'Argentina': 'South America',\n    'Belize': 'Central America',\n    'Costa Rica': 'Central America',\n    'El Salvador': 'Central America',\n    'Guatemala': 'Central America',\n    'Honduras': 'Central America',\n    'Nicaragua': 'Central America',\n    'Panama': 'Central America',\n    'Mexico': 'Central America',\n    'Bolivia': 'South America',\n    'Brazil': 'South America',\n    'Chile': 'South America',\n    'Colombia': 'South America',\n    'Ecuador': 'South America',\n    'Guyana': 'South America',\n    'Paraguay': 'South America',\n    'Peru': 'South America',\n    'Suriname': 'South America',\n    'Uruguay': 'South America',\n    'Venezuela, RB': 'South America',\n    'Cuba': 'Caribbean',\n    'Dominican Republic': 'Caribbean',\n    'Haiti': 'Caribbean',\n    'Jamaica': 'Caribbean',\n    'St. Martin (French part)': 'Caribbean',\n    'Puerto Rico': 'Caribbean',\n}\n\ndf['Region'] = df['Country Name'].map(region_mapping)\n\nIn order to do analysis on the data and comparing the countries within these regions to one another, need to modify the dataframes previously created. This will help in making visualizations easier.\n\n#Life expectancy\nlife_expectancy_df = df[df['Series Name'] == 'Life expectancy at birth, total (years)'].copy()\nyear_columns = [col for col in df.columns if '[YR' in col]\nlife_expectancy_df.loc[:, year_columns] = life_expectancy_df[year_columns].apply(pd.to_numeric, errors='coerce')\nlife_result = life_expectancy_df.groupby(['Country Name', 'Region'])[year_columns].mean().reset_index()\nlife_result['Average Life Expectancy'] = life_result[year_columns].mean(axis=1)\nlife_result = life_result[['Region', 'Country Name', 'Average Life Expectancy']]\n\n#Mortality Rate\nmortality_df = df[df['Series Name'] == 'Mortality rate, under-5 (per 1,000 live births)'].copy()\nmortality_df.loc[:, year_columns] = mortality_df[year_columns].apply(pd.to_numeric, errors='coerce')\nmort_result = mortality_df.groupby(['Country Name', 'Region'])[year_columns].mean().reset_index()\nmort_result['Average Mortality Under 5 yo'] = mort_result[year_columns].mean(axis=1)\nmort_result = mort_result[['Region', 'Country Name', 'Average Mortality Under 5 yo']]\n\n#Fertility Rate\nfertility_df = df[df['Series Name'] == 'Adolescent fertility rate (births per 1,000 women ages 15-19)'].copy()\nfertility_df.loc[:, year_columns] = fertility_df[year_columns].apply(pd.to_numeric, errors='coerce')\nfertility_result = fertility_df.groupby(['Country Name', 'Region'])[year_columns].mean().reset_index()\nfertility_result['Average Fertility Rate'] = fertility_result[year_columns].mean(axis=1)\nfertility_result = fertility_result[['Region', 'Country Name', 'Average Fertility Rate']]\n\n#merge the dfs\ncombined = life_result.merge(mort_result, on=['Country Name', 'Region'])\ncombined = combined.merge(fertility_result, on=['Country Name', 'Region'])\n\n\nadding additional two dataframes to work with:\n\nimmunization_group = [\n    'Immunization, DPT (% of children ages 12-23 months)',\n    'Immunization, HepB3 (% of one-year-old children)',\n    'Immunization, measles (% of children ages 12-23 months)'\n]\nimmunization_df = df[df['Series Name'].isin(immunization_group)].copy()\nimmunization_df.loc[:, year_columns] = immunization_df[year_columns].apply(pd.to_numeric, errors='coerce')\nimmune_result = immunization_df.groupby(['Country Name', 'Region'])[year_columns].mean().reset_index()\nimmune_result['Grouped Immunization Average'] = immune_result[year_columns].mean(axis=1)\nimmune_result = immune_result[['Region', 'Country Name', 'Grouped Immunization Average']]\n\nhealth_df = df[df['Series Name'] == 'Current health expenditure (% of GDP)'].copy()\nhealth_df.loc[:, year_columns] = health_df[year_columns].apply(pd.to_numeric, errors='coerce')\nhealth_result = health_df.groupby(['Country Name', 'Region'])[year_columns].mean().reset_index()\nhealth_result['Average Health Expenditure'] = health_result[year_columns].mean(axis=1)\nhealth_result = health_result[['Region', 'Country Name', 'Average Health Expenditure']]\n\n\nsouth_america_df = combined[combined['Region'] == 'South America']\n\nheatmap = south_america_df[['Country Name', \n                            'Average Life Expectancy', \n                            'Average Fertility Rate', \n                            'Average Mortality Under 5 yo']]\n\nheatmap = heatmap.set_index('Country Name')\nheatmap = heatmap.apply(pd.to_numeric, errors='coerce')\n\n\n\nplt.figure(figsize=(12, 8))\nsns.heatmap(heatmap, annot=True, cmap=\"YlGnBu\", fmt=\".1f\")\nplt.title('Health Metrics Heatmap for South America')\nplt.xlabel('Health Metric')\nplt.ylabel('Country')\n\nText(120.72222222222221, 0.5, 'Country')\n\n\n\n\n\n\n\n\n\nDo the same for Central America:\n\ncentral_america_df = combined[combined['Region'] == 'Central America']\n\nheatmap = central_america_df[['Country Name', \n                            'Average Life Expectancy', \n                            'Average Fertility Rate', \n                            'Average Mortality Under 5 yo']]\n\nheatmap = heatmap.set_index('Country Name')\nheatmap = heatmap.apply(pd.to_numeric, errors='coerce')\n\n\n\nplt.figure(figsize=(12, 8))\nsns.heatmap(heatmap, annot=True, cmap=\"YlGnBu\", fmt=\".1f\")\nplt.title('Health Metrics Heatmap for Central America')\nplt.xlabel('Health Metric')\nplt.ylabel('Country')\n\nText(120.72222222222221, 0.5, 'Country')\n\n\n\n\n\n\n\n\n\nDropping NA values in the dataframe\n\nfertility_result = fertility_result.dropna(subset=['Average Fertility Rate'])\nimmune_result = immune_result.dropna(subset=['Grouped Immunization Average'])\nlife_result = life_result.dropna(subset=['Average Life Expectancy'])\nmort_result = mort_result.dropna(subset=['Average Mortality Under 5 yo'])\nhealth_result = health_result.dropna(subset=['Average Health Expenditure'])\n\n\nranking_merge = life_result.merge(mort_result, on=['Region','Country Name'])\nranking_merge = ranking_merge.merge(fertility_result, on=['Region','Country Name'])\nranking_merge = ranking_merge.merge(immune_result, on=['Region','Country Name'])\nranking_merge = ranking_merge.merge(health_result, on=['Region','Country Name'])\n\nranking_merge['Life Expectancy Rank'] = ranking_merge['Average Life Expectancy'].rank(ascending=False).astype(int)\nranking_merge['Mortality Rank'] = ranking_merge['Average Mortality Under 5 yo'].rank(ascending=True).astype(int)\nranking_merge['Grouped Immunization Rank'] = ranking_merge['Grouped Immunization Average'].rank(ascending=False).astype(int)\nranking_merge['Health Expenditure Rank'] = ranking_merge['Average Health Expenditure'].rank(ascending=False).astype(int)\nranking_merge['Fertility Rank'] = ranking_merge['Average Fertility Rate'].rank(ascending=True).astype(int)\n\nranking_result = ranking_merge[['Region', \n                            'Life Expectancy Rank', \n                            'Mortality Rank', \n                            'Grouped Immunization Rank', \n                            'Health Expenditure Rank', \n                            'Fertility Rank']]\n\nfig, ax = plt.subplots(figsize=(16, 4))  #\nax.axis('off')\n\ntable = ax.table(\n    cellText=ranking_result.values,\n    colLabels=ranking_result.columns,\n    cellLoc='center',\n    loc='center'\n)\n\ntable.auto_set_font_size(False)\ntable.set_fontsize(12)\nplt.savefig('health_region_ranking.png', bbox_inches='tight', dpi=150)"
  },
  {
    "objectID": "scripts/qtm350 - data analysis [in sql] - lucas lobo.html",
    "href": "scripts/qtm350 - data analysis [in sql] - lucas lobo.html",
    "title": "Descriptive Statistics: SQL",
    "section": "",
    "text": "Location: ‘scripts’ folder\nLucas Lobo\n\n# Including code to connect to the database:\nimport sqlite3\nimport pandas as pd\n\n# Set up connection (already established in separate file, located in the 'data' folder).\nconn = sqlite3.connect(r\"C:\\Users\\lcsrl\\Downloads\\qtm350_project.db\")\ncursor = conn.cursor()\n\nHere are some insights from the data:\n\nTop 10 Countries by Average Life Expectancy across various time periods:\n\n\n1975-2024 (all years in dataset).\n1980-1989 (80s).\n2010-2019 (2010s).\n\n\nq1_a = \"\"\"\nSELECT country_name, AVG(value) AS avg_life_exp\nFROM wdi_long_clean\nWHERE indicator = 'Life expectancy at birth, total (years)'\nGROUP BY country_name\nORDER BY avg_life_exp DESC\nLIMIT 10\n\"\"\"\nq1_a_table = pd.read_sql(q1_a, conn)\nq1_a_table\n\n\n\n\n\n\n\n\ncountry_name\navg_life_exp\n\n\n\n\n0\nCosta Rica\n76.953000\n\n\n1\nSt. Martin (French part)\n76.319592\n\n\n2\nPuerto Rico\n75.974449\n\n\n3\nChile\n75.545469\n\n\n4\nCuba\n75.323898\n\n\n5\nUruguay\n74.259551\n\n\n6\nPanama\n73.476163\n\n\n7\nArgentina\n73.002898\n\n\n8\nVenezuela, RB\n71.322490\n\n\n9\nColombia\n71.205878\n\n\n\n\n\n\n\n\nq1_b = \"\"\"\nSELECT country_name, AVG(value) AS avg_life_exp\nFROM wdi_long_clean\nWHERE indicator = 'Life expectancy at birth, total (years)'\n  AND year IN ('1980', '1981', '1982', '1983', '1984', '1985', '1986', '1987', '1988', '1989')\nGROUP BY country_name\nORDER BY avg_life_exp DESC\nLIMIT 10\n\"\"\"\nq1_b_table = pd.read_sql(q1_b, conn)\nq1_b_table\n\n\n\n\n\n\n\n\ncountry_name\navg_life_exp\n\n\n\n\n0\nCosta Rica\n74.5500\n\n\n1\nCuba\n73.4186\n\n\n2\nPuerto Rico\n73.0772\n\n\n3\nSt. Martin (French part)\n73.0160\n\n\n4\nUruguay\n71.7568\n\n\n5\nChile\n71.3751\n\n\n6\nPanama\n70.2783\n\n\n7\nArgentina\n69.8508\n\n\n8\nVenezuela, RB\n69.7803\n\n\n9\nBelize\n68.2004\n\n\n\n\n\n\n\n\nq1_c = \"\"\"\nSELECT country_name, AVG(value) AS avg_life_exp\nFROM wdi_long_clean\nWHERE indicator = 'Life expectancy at birth, total (years)'\n  AND year IN ('2010', '2011', '2012', '2013', '2014', '2015', '2016', '2017', '2018', '2019')\nGROUP BY country_name\nORDER BY avg_life_exp DESC\nLIMIT 10\n\"\"\"\nq1_c_table = pd.read_sql(q1_c, conn)\nq1_c_table\n\n\n\n\n\n\n\n\ncountry_name\navg_life_exp\n\n\n\n\n0\nCosta Rica\n80.0098\n\n\n1\nPuerto Rico\n79.9724\n\n\n2\nChile\n79.8613\n\n\n3\nSt. Martin (French part)\n79.4908\n\n\n4\nCuba\n77.7397\n\n\n5\nPanama\n77.4483\n\n\n6\nUruguay\n77.1427\n\n\n7\nArgentina\n76.2544\n\n\n8\nEcuador\n76.0896\n\n\n9\nColombia\n75.9536\n\n\n\n\n\n\n\n\nWe’ll create a table that shows the highest rates of immunization for DPT, HepB3, and measles for each country. In other words, the number in each cell represents the immunization rate that was highest for that country across the years in the dataset. We will also include a value ‘agg_immunization_rate’, which is computed by taking teh average of the three maximum immunization rates.\n\n\nq2 = \"\"\"\nSELECT country_name,\n       MAX(CASE WHEN indicator = 'Immunization, DPT (% of children ages 12-23 months)' THEN value END) AS max_dpt,\n       MAX(CASE WHEN indicator = 'Immunization, HepB3 (% of one-year-old children)' THEN value END) AS max_hepb3,\n       MAX(CASE WHEN indicator = 'Immunization, measles (% of children ages 12-23 months)' THEN value END) AS max_measles,\n       (MAX(CASE WHEN indicator = 'Immunization, DPT (% of children ages 12-23 months)' THEN value END) +\n        MAX(CASE WHEN indicator = 'Immunization, HepB3 (% of one-year-old children)' THEN value END) +\n        MAX(CASE WHEN indicator = 'Immunization, measles (% of children ages 12-23 months)' THEN value END)) / 3 AS agg_immunization_rate\nFROM wdi_long_clean\nWHERE indicator IN (\n    'Immunization, DPT (% of children ages 12-23 months)',\n    'Immunization, HepB3 (% of one-year-old children)',\n    'Immunization, measles (% of children ages 12-23 months)'\n)\nGROUP BY country_name\nORDER BY agg_immunization_rate DESC\nLIMIT 23;\n\"\"\"\nq2_table = pd.read_sql(q2, conn)\nq2_table\n\n\n\n\n\n\n\n\ncountry_name\nmax_dpt\nmax_hepb3\nmax_measles\nagg_immunization_rate\n\n\n\n\n0\nMexico\n99\n99\n99\n99\n\n\n1\nHonduras\n99\n99\n99\n99\n\n\n2\nGuyana\n99\n99\n99\n99\n\n\n3\nEl Salvador\n99\n99\n99\n99\n\n\n4\nCuba\n99\n99\n99\n99\n\n\n5\nBrazil\n99\n99\n99\n99\n\n\n6\nPanama\n99\n98\n99\n98\n\n\n7\nNicaragua\n98\n98\n99\n98\n\n\n8\nCosta Rica\n99\n98\n99\n98\n\n\n9\nChile\n99\n97\n99\n98\n\n\n10\nBelize\n98\n98\n99\n98\n\n\n11\nUruguay\n97\n96\n99\n97\n\n\n12\nPeru\n99\n95\n98\n97\n\n\n13\nEcuador\n96\n96\n99\n97\n\n\n14\nArgentina\n98\n94\n99\n97\n\n\n15\nGuatemala\n96\n96\n96\n96\n\n\n16\nParaguay\n98\n93\n96\n95\n\n\n17\nBolivia\n95\n95\n96\n95\n\n\n18\nColombia\n94\n95\n95\n94\n\n\n19\nDominican Republic\n91\n90\n96\n92\n\n\n20\nVenezuela, RB\n87\n88\n98\n91\n\n\n21\nSuriname\n94\n87\n91\n90\n\n\n22\nHaiti\n9\n68\n8\n28\n\n\n\n\n\n\n\n\nYearly change in urban population for Mexico and Brazil (two countries with generally high urban populations) from 1975 to 2000.\n\nWe will use the LAG() function in SQL, which allows us to access data from a previous row in the same result set without the use of a self-join, in order to calculate the difference between years.\n\nq3_a = \"\"\"\nSELECT year, \n  value AS urban_population,\n  value - LAG(value) OVER (ORDER BY year) AS yearly_growth\nFROM wdi_long_clean\nWHERE country_name = 'Mexico'\n  AND indicator = 'Urban population'\n  AND year BETWEEN '1975' AND '2000'\nORDER BY year;\n\"\"\"\nq3_a_table = pd.read_sql(q3_a, conn)\nq3_a_table\n\n\n\n\n\n\n\n\nyear\nurban_population\nyearly_growth\n\n\n\n\n0\n1975\n37016764\nNaN\n\n\n1\n1976\n38504442\n1487678.0\n\n\n2\n1977\n40011399\n1506957.0\n\n\n3\n1978\n41544154\n1532755.0\n\n\n4\n1979\n43095854\n1551700.0\n\n\n5\n1980\n44646369\n1550515.0\n\n\n6\n1981\n46068153\n1421784.0\n\n\n7\n1982\n47469200\n1401047.0\n\n\n8\n1983\n48882146\n1412946.0\n\n\n9\n1984\n50305880\n1423734.0\n\n\n10\n1985\n51742434\n1436554.0\n\n\n11\n1986\n53195618\n1453184.0\n\n\n12\n1987\n54666745\n1471127.0\n\n\n13\n1988\n56155065\n1488320.0\n\n\n14\n1989\n57649750\n1494685.0\n\n\n15\n1990\n59149337\n1499587.0\n\n\n16\n1991\n60634660\n1485323.0\n\n\n17\n1992\n62132096\n1497436.0\n\n\n18\n1993\n63634911\n1502815.0\n\n\n19\n1994\n65145831\n1510920.0\n\n\n20\n1995\n66663966\n1518135.0\n\n\n21\n1996\n68109906\n1445940.0\n\n\n22\n1997\n69508938\n1399032.0\n\n\n23\n1998\n70903451\n1394513.0\n\n\n24\n1999\n72293903\n1390452.0\n\n\n25\n2000\n73694985\n1401082.0\n\n\n\n\n\n\n\n\nq3_b = \"\"\"\nSELECT year, \n  value AS urban_population,\n  value - LAG(value) OVER (ORDER BY year) AS yearly_growth\nFROM wdi_long_clean\nWHERE country_name = 'Brazil'\n  AND indicator = 'Urban population'\n  AND year BETWEEN '1975' AND '2000'\nORDER BY year;\n\"\"\"\nq3_b_table = pd.read_sql(q3_b, conn)\nq3_b_table\n\n\n\n\n\n\n\n\nyear\nurban_population\nyearly_growth\n\n\n\n\n0\n1975\n65420857\nNaN\n\n\n1\n1976\n68051232\n2630375.0\n\n\n2\n1977\n70760392\n2709160.0\n\n\n3\n1978\n73551099\n2790707.0\n\n\n4\n1979\n76416004\n2864905.0\n\n\n5\n1980\n79352101\n2936097.0\n\n\n6\n1981\n82340685\n2988584.0\n\n\n7\n1982\n85371053\n3030368.0\n\n\n8\n1983\n88441554\n3070501.0\n\n\n9\n1984\n91547882\n3106328.0\n\n\n10\n1985\n94673905\n3126023.0\n\n\n11\n1986\n97807964\n3134059.0\n\n\n12\n1987\n100930955\n3122991.0\n\n\n13\n1988\n104046863\n3115908.0\n\n\n14\n1989\n107150809\n3103946.0\n\n\n15\n1990\n110249653\n3098844.0\n\n\n16\n1991\n113322847\n3073194.0\n\n\n17\n1992\n116391291\n3068444.0\n\n\n18\n1993\n119447677\n3056386.0\n\n\n19\n1994\n122479568\n3031891.0\n\n\n20\n1995\n125522590\n3043022.0\n\n\n21\n1996\n128573880\n3051290.0\n\n\n22\n1997\n131742708\n3168828.0\n\n\n23\n1998\n134957264\n3214556.0\n\n\n24\n1999\n138164576\n3207312.0\n\n\n25\n2000\n141288924\n3124348.0\n\n\n\n\n\n\n\n\nWe can compute tables that show the average trade amounts (as % of GDP) across 1975-2024, first by region, and second by country.\n\n\nq4_a = \"\"\"\nSELECT region,\n       AVG(value) AS avg_trade_gdp\nFROM wdi_long_clean\nWHERE indicator = 'Trade (% of GDP)'\n  AND CAST(year AS INTEGER) BETWEEN 1975 AND 2024\nGROUP BY region\nORDER BY avg_trade_gdp DESC;\n\"\"\"\nq4_a_table = pd.read_sql(q4_a, conn)\nq4_a_table\n\n\n\n\n\n\n\n\nregion\navg_trade_gdp\n\n\n\n\n0\nCentral America\n75.001154\n\n\n1\nCaribbean\n65.423034\n\n\n2\nSouth America\n53.059413\n\n\n3\nOther\n0.000000\n\n\n\n\n\n\n\n\nq4_b = \"\"\"\nSELECT country_name, region,\n       AVG(value) AS avg_trade_gdp\nFROM wdi_long_clean\nWHERE indicator = 'Trade (% of GDP)'\n  AND CAST(year AS INTEGER) BETWEEN 1975 AND 2024\nGROUP BY country_name, region\nORDER BY avg_trade_gdp DESC\nLIMIT 24;\n\"\"\"\nq4_b_table = pd.read_sql(q4_b, conn)\nq4_b_table\n\n\n\n\n\n\n\n\ncountry_name\nregion\navg_trade_gdp\n\n\n\n\n0\nGuyana\nSouth America\n172.706599\n\n\n1\nPanama\nCentral America\n123.698223\n\n\n2\nPuerto Rico\nCaribbean\n104.956422\n\n\n3\nSuriname\nSouth America\n97.518818\n\n\n4\nHonduras\nCentral America\n95.767372\n\n\n5\nBelize\nCentral America\n89.613579\n\n\n6\nNicaragua\nCentral America\n74.432156\n\n\n7\nCosta Rica\nCentral America\n74.183460\n\n\n8\nParaguay\nSouth America\n71.780297\n\n\n9\nEl Salvador\nCentral America\n65.621117\n\n\n10\nDominican Republic\nCaribbean\n61.151605\n\n\n11\nChile\nSouth America\n58.341319\n\n\n12\nBolivia\nCentral America\n56.918690\n\n\n13\nVenezuela, RB\nSouth America\n50.808681\n\n\n14\nCuba\nCaribbean\n49.878871\n\n\n15\nGuatemala\nCentral America\n49.082497\n\n\n16\nEcuador\nSouth America\n48.241917\n\n\n17\nMexico\nCentral America\n47.184352\n\n\n18\nUruguay\nSouth America\n45.534761\n\n\n19\nPeru\nSouth America\n41.024383\n\n\n20\nHaiti\nCaribbean\n38.153141\n\n\n21\nColombia\nSouth America\n34.294808\n\n\n22\nArgentina\nSouth America\n24.314856\n\n\n23\nBrazil\nSouth America\n22.548464"
  },
  {
    "objectID": "report.html",
    "href": "report.html",
    "title": "QTM 350 Final Project Report",
    "section": "",
    "text": "For this project, we will be investigating population dynamics from the Caribbean and Central and South America from 1975-2024. We are specifically interested in analyzing how indicators such as life expectancy, mortality rate, and adolescent fertility rate interact with one another. We will be utilizing data from the publicly availiable World Development Index (WDI) from the World Bank. We will use additional attributes like immunization (measles, DPT, HEPB3), HIV prevalence, urban and rural populations, unemployment rates, and surface area for a deeper look at our specified region’s status and history.\n\n\nHow do various health-related, economic, and geographic factors contribute towards and interact with life expectancy at birth, mortality rate, and adolescent fertility rate?"
  },
  {
    "objectID": "report.html#loading-creating-the-database.",
    "href": "report.html#loading-creating-the-database.",
    "title": "QTM 350 Final Project Report",
    "section": "3.1 Loading + Creating the Database.",
    "text": "3.1 Loading + Creating the Database.\n\nimport os\nprint(os.getcwd())\n\n/Users/calebsharkey/Documents/School/qtm350/final_project/qtm350-final-project\n\n\n\n# Relevant packages:\nimport sqlite3\nimport pandas as pd\n\n# Loading the WDI data as a csv (using pandas):\n# Change relative path to your downloaded WDI data\ndf = pd.read_csv(\"data/wdi_rawdata.csv\", encoding='latin1')\n\n# Created a database by running the following two commands in my terminal:\n\n## cd \"C:\\Users\\lcsrl\\Downloads\"\n## touch qtm350_project.db\n\nimport warnings\nwarnings.simplefilter(action='ignore', category=FutureWarning)\n\n# Set up connection:\nconn = sqlite3.connect(\"data/qtm350_project.db\")\ncursor = conn.cursor()\n\n# Write 'df' to SQL:\ncursor.execute(\"DROP TABLE IF EXISTS wdi;\")\ndf.to_sql('wdi', conn, if_exists='replace', index=False)\n\n542"
  },
  {
    "objectID": "report.html#data-cleaning-transformation",
    "href": "report.html#data-cleaning-transformation",
    "title": "QTM 350 Final Project Report",
    "section": "3.2 Data Cleaning + Transformation:",
    "text": "3.2 Data Cleaning + Transformation:\nOff the bat, there are lots of oddly-named variables and warped data. We’ll create a new cleaned table. We’ll drop/modify N/A values (denoted as ..) according to the following procedures.\n\n# new, cleaned dataframe\n# 1: create a new 'year' list (to replace the current format)\nyear_columns = [\n    f'\"{year} [YR{year}]\" AS \"{year}\"' for year in range(1975, 2025)\n]\n\n# 2: new table only with relevant columns: country_name, indicator, and years \ncursor.execute(\"DROP TABLE IF EXISTS wdi_renamed;\")\nq_keep = f\"\"\"\nCREATE TABLE wdi_renamed AS\nSELECT \n    \"Country Name\" AS country_name,\n    \"Series Name\" AS indicator,\n    {', '.join(year_columns)}\nFROM wdi\n\"\"\"\nconn.execute(q_keep)\n\n&lt;sqlite3.Cursor at 0x12662cfc0&gt;\n\n\n\npd.read_sql(\"SELECT * FROM wdi_renamed\", conn).head()\n\n\n\n\n\n\n\n\ncountry_name\nindicator\n1975\n1976\n1977\n1978\n1979\n1980\n1981\n1982\n...\n2015\n2016\n2017\n2018\n2019\n2020\n2021\n2022\n2023\n2024\n\n\n\n\n0\nArgentina\nLife expectancy at birth, total (years)\n66.965\n67.03\n67.595\n67.999\n68.434\n68.576\n68.858\n68.973\n...\n76.6\n76.105\n76.543\n76.77\n76.847\n75.878\n73.948\n75.806\n77.395\n..\n\n\n1\nArgentina\nMortality rate, under-5 (per 1,000 live births)\n63.3\n59.8\n55.6\n51.2\n46.8\n42.8\n39.4\n36.5\n...\n11.7\n11.4\n11\n10.7\n10.5\n10.3\n10\n9.8\n9.6\n..\n\n\n2\nArgentina\nAdolescent fertility rate (births per 1,000 wo...\n73.076\n74.913\n76.634\n77.695\n78.328\n77.928\n76.742\n74.387\n...\n63.879\n58.79\n55.022\n49.926\n41.751\n31.492\n28.54\n25.767\n26.414\n..\n\n\n3\nArgentina\nPrevalence of HIV, total (% of population ages...\n..\n..\n..\n..\n..\n..\n..\n..\n...\n0.4\n0.4\n0.4\n0.4\n0.4\n0.4\n0.4\n0.4\n..\n..\n\n\n4\nArgentina\nImmunization, DPT (% of children ages 12-23 mo...\n..\n..\n..\n..\n..\n44\n49\n58\n...\n94\n92\n86\n86\n83\n74\n81\n84\n66\n..\n\n\n\n\n5 rows × 52 columns\n\n\n\nSorting the countries into three regions as follows:\nCentral America (9 countries): - Belize, Costa Rica, El Salvador, Guatemala, Honduras, Nicaragua, Panama, Mexico, Bolivia,\nSouth America (10 countries): - Argentina, Brazil, Chile, Colombia, Guyana, Paraguay, Peru, Suriname, Uruguay, Venezuela, RB.\nCaribbean (5 countries): - Dominican Republic, Haiti, Jamaica, St. Martin (French part), Puerto Rico.\n\nconn.execute(\"DROP TABLE IF EXISTS wdi_region;\")\n\n# writes an implicit 'if else' function in sql to create a new column 'region' based on the country name by using CASE WHEN/ELSE statements.\nq_region = \"\"\"\nCREATE TABLE wdi_region AS\nSELECT \n    country_name,\n    CASE\n        WHEN country_name IN (\n            'Belize', 'Costa Rica', 'El Salvador', 'Guatemala', 'Honduras', 'Nicaragua', 'Panama', 'Mexico', 'Bolivia'\n        ) THEN 'Central America'\n        WHEN country_name IN (\n            'Argentina', 'Brazil', 'Chile', 'Colombia', 'Ecuador', 'Guyana', 'Paraguay', 'Peru', 'Suriname', 'Uruguay', 'Venezuela, RB'\n        ) THEN 'South America'\n        WHEN country_name IN (\n            'Cuba', 'Dominican Republic', 'Haiti', 'Jamaica', 'St. Martin (French part)', 'Puerto Rico'\n        ) THEN 'Caribbean'\n        ELSE 'Other'\n    END AS region,\n    indicator,\n    \"1975\", \"1976\", \"1977\", \"1978\", \"1979\", \"1980\", \"1981\", \"1982\", \"1983\", \"1984\", \"1985\", \"1986\", \"1987\", \"1988\", \"1989\",\n    \"1990\", \"1991\", \"1992\", \"1993\", \"1994\", \"1995\", \"1996\", \"1997\", \"1998\", \"1999\", \"2000\", \"2001\", \"2002\", \"2003\", \"2004\", \n    \"2005\", \"2006\", \"2007\", \"2008\", \"2009\", \"2010\", \"2011\", \"2012\", \"2013\", \"2014\", \"2015\", \"2016\", \"2017\", \"2018\", \"2019\",\n    \"2020\", \"2021\", \"2022\", \"2023\", \"2024\"\nFROM wdi_renamed\n\"\"\"\n\nconn.execute(q_region)\n\n&lt;sqlite3.Cursor at 0x12662c8c0&gt;\n\n\nWe’ll create a pivot table (long) in order to display each variable in each year by country.\n\n# SQL code that mimics 'melt' in python: iterates over each year and stores a list of queries\nyear_range = range(1975, 2025)\nunion_queries = []\n\n# creates a list of SQL commands\n# column order: year, country_name\nconn.execute(\"DROP TABLE IF EXISTS wdi_long;\")\nfor year in year_range:\n    union_queries.append(f\"\"\"\n    SELECT \n        '{year}' AS year,\n        country_name,\n        region,\n        indicator,\n        \"{year}\" AS value\n    FROM wdi_region\n    WHERE \"{year}\" IS NOT NULL\n    \"\"\")\n\n# joins and executes each individual year using UNION ALL (basically stacks on top of each other)\nq_long = f\"\"\"\nCREATE TABLE wdi_long AS\n{'UNION ALL'.join(union_queries)}\n\"\"\"\n\nconn.execute(q_long)\n\n&lt;sqlite3.Cursor at 0x1266cc240&gt;\n\n\nLots of information for various years is unavailable, perhaps because the country does not track certain info, they only started after a certain year, etc. We’ll create a modified version of this pivot table to only include rows where the data is present\n\nconn.execute(\"DROP TABLE IF EXISTS wdi_long_clean;\")\nq_filter_non_null = \"\"\"\nCREATE TABLE wdi_long_clean AS\nSELECT *\nFROM wdi_long\nWHERE value IS NOT NULL AND value != '..'\n\"\"\"\nconn.execute(q_filter_non_null)\n\n# Here's a sample of the cleaned data:\npd.read_sql(\"SELECT * FROM wdi_long_clean\", conn).head(25)\n\n\n\n\n\n\n\n\nyear\ncountry_name\nregion\nindicator\nvalue\n\n\n\n\n0\n1975\nArgentina\nSouth America\nLife expectancy at birth, total (years)\n66.965\n\n\n1\n1975\nArgentina\nSouth America\nMortality rate, under-5 (per 1,000 live births)\n63.3\n\n\n2\n1975\nArgentina\nSouth America\nAdolescent fertility rate (births per 1,000 wo...\n73.076\n\n\n3\n1975\nArgentina\nSouth America\nUrban population\n20950006\n\n\n4\n1975\nArgentina\nSouth America\nUnemployment, total (% of total labor force) (...\n2.3\n\n\n5\n1975\nArgentina\nSouth America\nTrade (% of GDP)\n11.80272429\n\n\n6\n1975\nArgentina\nSouth America\nSurface area (sq. km)\n2780400\n\n\n7\n1975\nArgentina\nSouth America\nSchool enrollment, primary (% net)\n96.32775\n\n\n8\n1975\nArgentina\nSouth America\nRural population\n4924101\n\n\n9\n1975\nBelize\nCentral America\nLife expectancy at birth, total (years)\n65.377\n\n\n10\n1975\nBelize\nCentral America\nMortality rate, under-5 (per 1,000 live births)\n80\n\n\n11\n1975\nBelize\nCentral America\nAdolescent fertility rate (births per 1,000 wo...\n142.49\n\n\n12\n1975\nBelize\nCentral America\nUrban population\n65416\n\n\n13\n1975\nBelize\nCentral America\nSurface area (sq. km)\n22970\n\n\n14\n1975\nBelize\nCentral America\nRural population\n64971\n\n\n15\n1975\nCosta Rica\nCentral America\nLife expectancy at birth, total (years)\n70.253\n\n\n16\n1975\nCosta Rica\nCentral America\nMortality rate, under-5 (per 1,000 live births)\n45.4\n\n\n17\n1975\nCosta Rica\nCentral America\nAdolescent fertility rate (births per 1,000 wo...\n91.632\n\n\n18\n1975\nCosta Rica\nCentral America\nUrban population\n865318\n\n\n19\n1975\nCosta Rica\nCentral America\nTrade (% of GDP)\n68.60978582\n\n\n20\n1975\nCosta Rica\nCentral America\nSurface area (sq. km)\n51100\n\n\n21\n1975\nCosta Rica\nCentral America\nSchool enrollment, primary (% net)\n90.45446\n\n\n22\n1975\nCosta Rica\nCentral America\nRural population\n1227401\n\n\n23\n1975\nEl Salvador\nCentral America\nLife expectancy at birth, total (years)\n53.422\n\n\n24\n1975\nEl Salvador\nCentral America\nMortality rate, under-5 (per 1,000 live births)\n130.7"
  },
  {
    "objectID": "report.html#descriptive-statistics-in-sql",
    "href": "report.html#descriptive-statistics-in-sql",
    "title": "QTM 350 Final Project Report",
    "section": "3.3 Descriptive Statistics (in SQL)",
    "text": "3.3 Descriptive Statistics (in SQL)\n1. Top 10 Countries by Average Life Expectancy across various time periods:\n\n1975-2024 (all years in dataset).\n1980-1989 (80s).\n2010-2019 (2010s).\n\n\nq1_a = \"\"\"\nSELECT country_name, AVG(value) AS avg_life_exp\nFROM wdi_long_clean\nWHERE indicator = 'Life expectancy at birth, total (years)'\nGROUP BY country_name\nORDER BY avg_life_exp DESC\nLIMIT 10\n\"\"\"\nq1_a_table = pd.read_sql(q1_a, conn)\nq1_a_table\n\n\n\n\n\n\n\n\ncountry_name\navg_life_exp\n\n\n\n\n0\nCosta Rica\n76.953000\n\n\n1\nSt. Martin (French part)\n76.319592\n\n\n2\nPuerto Rico\n75.974449\n\n\n3\nChile\n75.545469\n\n\n4\nCuba\n75.323898\n\n\n5\nUruguay\n74.259551\n\n\n6\nPanama\n73.476163\n\n\n7\nArgentina\n73.002898\n\n\n8\nVenezuela, RB\n71.322490\n\n\n9\nColombia\n71.205878\n\n\n\n\n\n\n\n\nq1_b = \"\"\"\nSELECT country_name, AVG(value) AS avg_life_exp\nFROM wdi_long_clean\nWHERE indicator = 'Life expectancy at birth, total (years)'\n  AND year IN ('1980', '1981', '1982', '1983', '1984', '1985', '1986', '1987', '1988', '1989')\nGROUP BY country_name\nORDER BY avg_life_exp DESC\nLIMIT 10\n\"\"\"\nq1_b_table = pd.read_sql(q1_b, conn)\nq1_b_table\n\n\n\n\n\n\n\n\ncountry_name\navg_life_exp\n\n\n\n\n0\nCosta Rica\n74.5500\n\n\n1\nCuba\n73.4186\n\n\n2\nPuerto Rico\n73.0772\n\n\n3\nSt. Martin (French part)\n73.0160\n\n\n4\nUruguay\n71.7568\n\n\n5\nChile\n71.3751\n\n\n6\nPanama\n70.2783\n\n\n7\nArgentina\n69.8508\n\n\n8\nVenezuela, RB\n69.7803\n\n\n9\nBelize\n68.2004\n\n\n\n\n\n\n\n\nq1_c = \"\"\"\nSELECT country_name, AVG(value) AS avg_life_exp\nFROM wdi_long_clean\nWHERE indicator = 'Life expectancy at birth, total (years)'\n  AND year IN ('2010', '2011', '2012', '2013', '2014', '2015', '2016', '2017', '2018', '2019')\nGROUP BY country_name\nORDER BY avg_life_exp DESC\nLIMIT 10\n\"\"\"\nq1_c_table = pd.read_sql(q1_c, conn)\nq1_c_table\n\n\n\n\n\n\n\n\ncountry_name\navg_life_exp\n\n\n\n\n0\nCosta Rica\n80.0098\n\n\n1\nPuerto Rico\n79.9724\n\n\n2\nChile\n79.8613\n\n\n3\nSt. Martin (French part)\n79.4908\n\n\n4\nCuba\n77.7397\n\n\n5\nPanama\n77.4483\n\n\n6\nUruguay\n77.1427\n\n\n7\nArgentina\n76.2544\n\n\n8\nEcuador\n76.0896\n\n\n9\nColombia\n75.9536\n\n\n\n\n\n\n\n2. Highest rates of immunization for DPT, HepB3, and measles for each country:\nIn other words, the number in each cell represents the immunization rate that was highest for that country across the years in the dataset. We will also include a value ‘agg_immunization_rate’, which is computed by taking teh average of the three maximum immunization rates.\n\nq2 = \"\"\"\nSELECT country_name,\n       MAX(CASE WHEN indicator = 'Immunization, DPT (% of children ages 12-23 months)' THEN value END) AS max_dpt,\n       MAX(CASE WHEN indicator = 'Immunization, HepB3 (% of one-year-old children)' THEN value END) AS max_hepb3,\n       MAX(CASE WHEN indicator = 'Immunization, measles (% of children ages 12-23 months)' THEN value END) AS max_measles,\n       (MAX(CASE WHEN indicator = 'Immunization, DPT (% of children ages 12-23 months)' THEN value END) +\n        MAX(CASE WHEN indicator = 'Immunization, HepB3 (% of one-year-old children)' THEN value END) +\n        MAX(CASE WHEN indicator = 'Immunization, measles (% of children ages 12-23 months)' THEN value END)) / 3 AS agg_immunization_rate\nFROM wdi_long_clean\nWHERE indicator IN (\n    'Immunization, DPT (% of children ages 12-23 months)',\n    'Immunization, HepB3 (% of one-year-old children)',\n    'Immunization, measles (% of children ages 12-23 months)'\n)\nGROUP BY country_name\nORDER BY agg_immunization_rate DESC\nLIMIT 23;\n\"\"\"\nq2_table = pd.read_sql(q2, conn)\nq2_table\n\n\n\n\n\n\n\n\ncountry_name\nmax_dpt\nmax_hepb3\nmax_measles\nagg_immunization_rate\n\n\n\n\n0\nMexico\n99\n99\n99\n99\n\n\n1\nHonduras\n99\n99\n99\n99\n\n\n2\nGuyana\n99\n99\n99\n99\n\n\n3\nEl Salvador\n99\n99\n99\n99\n\n\n4\nCuba\n99\n99\n99\n99\n\n\n5\nBrazil\n99\n99\n99\n99\n\n\n6\nPanama\n99\n98\n99\n98\n\n\n7\nNicaragua\n98\n98\n99\n98\n\n\n8\nCosta Rica\n99\n98\n99\n98\n\n\n9\nChile\n99\n97\n99\n98\n\n\n10\nBelize\n98\n98\n99\n98\n\n\n11\nUruguay\n97\n96\n99\n97\n\n\n12\nPeru\n99\n95\n98\n97\n\n\n13\nEcuador\n96\n96\n99\n97\n\n\n14\nArgentina\n98\n94\n99\n97\n\n\n15\nGuatemala\n96\n96\n96\n96\n\n\n16\nParaguay\n98\n93\n96\n95\n\n\n17\nBolivia\n95\n95\n96\n95\n\n\n18\nColombia\n94\n95\n95\n94\n\n\n19\nDominican Republic\n91\n90\n96\n92\n\n\n20\nVenezuela, RB\n87\n88\n98\n91\n\n\n21\nSuriname\n94\n87\n91\n90\n\n\n22\nHaiti\n9\n68\n8\n28\n\n\n\n\n\n\n\n3. Yearly change in urban population for Mexico and Brazil (two countries with generally high urban populations) from 1975 to 2000:\nWe will use the LAG() function in SQL, which allows us to access data from a previous row in the same result set without the use of a self-join, in order to calculate the difference between years.\n\nq3_a = \"\"\"\nSELECT year, \n  value AS urban_population,\n  value - LAG(value) OVER (ORDER BY year) AS yearly_growth\nFROM wdi_long_clean\nWHERE country_name = 'Mexico'\n  AND indicator = 'Urban population'\n  AND year BETWEEN '1975' AND '2000'\nORDER BY year;\n\"\"\"\nq3_a_table = pd.read_sql(q3_a, conn)\nq3_a_table\n\n\n\n\n\n\n\n\nyear\nurban_population\nyearly_growth\n\n\n\n\n0\n1975\n37016764\nNaN\n\n\n1\n1976\n38504442\n1487678.0\n\n\n2\n1977\n40011399\n1506957.0\n\n\n3\n1978\n41544154\n1532755.0\n\n\n4\n1979\n43095854\n1551700.0\n\n\n5\n1980\n44646369\n1550515.0\n\n\n6\n1981\n46068153\n1421784.0\n\n\n7\n1982\n47469200\n1401047.0\n\n\n8\n1983\n48882146\n1412946.0\n\n\n9\n1984\n50305880\n1423734.0\n\n\n10\n1985\n51742434\n1436554.0\n\n\n11\n1986\n53195618\n1453184.0\n\n\n12\n1987\n54666745\n1471127.0\n\n\n13\n1988\n56155065\n1488320.0\n\n\n14\n1989\n57649750\n1494685.0\n\n\n15\n1990\n59149337\n1499587.0\n\n\n16\n1991\n60634660\n1485323.0\n\n\n17\n1992\n62132096\n1497436.0\n\n\n18\n1993\n63634911\n1502815.0\n\n\n19\n1994\n65145831\n1510920.0\n\n\n20\n1995\n66663966\n1518135.0\n\n\n21\n1996\n68109906\n1445940.0\n\n\n22\n1997\n69508938\n1399032.0\n\n\n23\n1998\n70903451\n1394513.0\n\n\n24\n1999\n72293903\n1390452.0\n\n\n25\n2000\n73694985\n1401082.0\n\n\n\n\n\n\n\n\nq3_b = \"\"\"\nSELECT year, \n  value AS urban_population,\n  value - LAG(value) OVER (ORDER BY year) AS yearly_growth\nFROM wdi_long_clean\nWHERE country_name = 'Brazil'\n  AND indicator = 'Urban population'\n  AND year BETWEEN '1975' AND '2000'\nORDER BY year;\n\"\"\"\nq3_b_table = pd.read_sql(q3_b, conn)\nq3_b_table\n\n\n\n\n\n\n\n\nyear\nurban_population\nyearly_growth\n\n\n\n\n0\n1975\n65420857\nNaN\n\n\n1\n1976\n68051232\n2630375.0\n\n\n2\n1977\n70760392\n2709160.0\n\n\n3\n1978\n73551099\n2790707.0\n\n\n4\n1979\n76416004\n2864905.0\n\n\n5\n1980\n79352101\n2936097.0\n\n\n6\n1981\n82340685\n2988584.0\n\n\n7\n1982\n85371053\n3030368.0\n\n\n8\n1983\n88441554\n3070501.0\n\n\n9\n1984\n91547882\n3106328.0\n\n\n10\n1985\n94673905\n3126023.0\n\n\n11\n1986\n97807964\n3134059.0\n\n\n12\n1987\n100930955\n3122991.0\n\n\n13\n1988\n104046863\n3115908.0\n\n\n14\n1989\n107150809\n3103946.0\n\n\n15\n1990\n110249653\n3098844.0\n\n\n16\n1991\n113322847\n3073194.0\n\n\n17\n1992\n116391291\n3068444.0\n\n\n18\n1993\n119447677\n3056386.0\n\n\n19\n1994\n122479568\n3031891.0\n\n\n20\n1995\n125522590\n3043022.0\n\n\n21\n1996\n128573880\n3051290.0\n\n\n22\n1997\n131742708\n3168828.0\n\n\n23\n1998\n134957264\n3214556.0\n\n\n24\n1999\n138164576\n3207312.0\n\n\n25\n2000\n141288924\n3124348.0\n\n\n\n\n\n\n\n4. Average trade amounts (as % of GDP) across 1975-2024, first by region, and second by country:\n\nq4_a = \"\"\"\nSELECT region,\n       AVG(value) AS avg_trade_gdp\nFROM wdi_long_clean\nWHERE indicator = 'Trade (% of GDP)'\n  AND CAST(year AS INTEGER) BETWEEN 1975 AND 2024\nGROUP BY region\nORDER BY avg_trade_gdp DESC;\n\"\"\"\nq4_a_table = pd.read_sql(q4_a, conn)\nq4_a_table\n\n\n\n\n\n\n\n\nregion\navg_trade_gdp\n\n\n\n\n0\nCentral America\n75.001154\n\n\n1\nCaribbean\n65.423034\n\n\n2\nSouth America\n53.059413\n\n\n3\nOther\n0.000000\n\n\n\n\n\n\n\n\nq4_b = \"\"\"\nSELECT country_name, region,\n       AVG(value) AS avg_trade_gdp\nFROM wdi_long_clean\nWHERE indicator = 'Trade (% of GDP)'\n  AND CAST(year AS INTEGER) BETWEEN 1975 AND 2024\nGROUP BY country_name, region\nORDER BY avg_trade_gdp DESC\nLIMIT 24;\n\"\"\"\nq4_b_table = pd.read_sql(q4_b, conn)\nq4_b_table\n\n\n\n\n\n\n\n\ncountry_name\nregion\navg_trade_gdp\n\n\n\n\n0\nGuyana\nSouth America\n172.706599\n\n\n1\nPanama\nCentral America\n123.698223\n\n\n2\nPuerto Rico\nCaribbean\n104.956422\n\n\n3\nSuriname\nSouth America\n97.518818\n\n\n4\nHonduras\nCentral America\n95.767372\n\n\n5\nBelize\nCentral America\n89.613579\n\n\n6\nNicaragua\nCentral America\n74.432156\n\n\n7\nCosta Rica\nCentral America\n74.183460\n\n\n8\nParaguay\nSouth America\n71.780297\n\n\n9\nEl Salvador\nCentral America\n65.621117\n\n\n10\nDominican Republic\nCaribbean\n61.151605\n\n\n11\nChile\nSouth America\n58.341319\n\n\n12\nBolivia\nCentral America\n56.918690\n\n\n13\nVenezuela, RB\nSouth America\n50.808681\n\n\n14\nCuba\nCaribbean\n49.878871\n\n\n15\nGuatemala\nCentral America\n49.082497\n\n\n16\nEcuador\nSouth America\n48.241917\n\n\n17\nMexico\nCentral America\n47.184352\n\n\n18\nUruguay\nSouth America\n45.534761\n\n\n19\nPeru\nSouth America\n41.024383\n\n\n20\nHaiti\nCaribbean\n38.153141\n\n\n21\nColombia\nSouth America\n34.294808\n\n\n22\nArgentina\nSouth America\n24.314856\n\n\n23\nBrazil\nSouth America\n22.548464"
  }
]